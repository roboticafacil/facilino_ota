{
	"langs": {
		"en-GB": {
			"keys": {
				"LANG_CATEGORY_BLOCKS": "My Blocks",
				"LANG_CATEGORY_PROCEDURES": "Functions",
				"LANG_CATEGORY_CONTROLS": "Control",
				"LANG_CATEGORY_MATH": "Math",
				"LANG_CATEGORY_CURVE": "Curve",
				"LANG_CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK": "Break out of the containing loop.",
				"LANG_CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE": "Skip the rest of this loop, and continue with the next iteration.",
				"LANG_CONTROLS_WHILEUNTIL_TOOLTIP_WHILE": "While the condition is true, then do the statements.",
				"LANG_CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL": "While the condition is false, then do the statements.",
				"LANG_CONTROLS_BLOCK": "Block",
				"LANG_CONTROLS_BLOCK_NAME": "Creates a block section",
				"LANG_CONTROLS_BLOCK_DESCRIPTION": "This instruction adds a comment on the generated code as well as encansulates the code inside the container (generated code include brackets that might be usefull to create different contexts for variables). Also, if you collapse the block instruction, will appear just the comment and the remainder of blocks will be occluded, but it does not affect to the code generation, and thus it is usefull to generate compact Facilino code.",
				"LANG_CONTROLS_BLOCK_TOOLTIP": "Creates a block of instructions. This can be used to duplicate a set of instructions or to collapse them into a one single instruction to avoid cluttering.",
				"LANG_CONTROLS_COMMENT_TOOLTIP": "Creates a comment on the generated code. It does not affect to the compilation/execution of the code.",
				"LANG_CONTROLS_COMMENT_NAME": "Create a comment in Arduino code",
				"LANG_CONTROLS_COMMENT_DESCRIPTION": "This instruction adds a comment on the generated code. This is useful to document your generated code. It is possible to add also comments on block instructions by right-clicking on the instruction and selecting the 'Add comment' option.",
				"LANG_CONTROLS_IGNORE_NAME": "Ignore output",
				"LANG_CONTROLS_IGNORE_IGNORE": "Ignore output",
				"LANG_CONTROLS_IGNORE_DESCRIPTION": "This instructions produces the code to evaluate its input, but the result is ignored.",
				"LANG_CONTROLS_IGNORE_TOOLTIP": "This instructions produces the code to evaluate its input, but the result is ignored.",
				"LANG_CATEGORY_ADVANCED": "Basic I/O",
				"LANG_CATEGORY_SCREEN": "Display",
				"LANG_CATEGORY_LOGIC": "Logic",
				"LANG_SUBCATEGORY_BITWISE": "Bitwise",
				"LANG_CATEGORY_DEPRECATED": "Deprecated",
				"LANG_LOGIC_COMPARE_NAME": "Logic compare",
				"LANG_LOGIC_COMPARE_DESCRIPTION": "Evaluates the relationship between two 'entities' to discriminate whether they are equal; different; smaller than; less than or equal to; greater than or greater than or equal to or greater. The entities to be related can be integers, decimals, binary values, characters, etc ... (they could also be more complex objects). Returns true or false.",
				"LANG_LOGIC_COMPARE_DROPDOWN_OPERATOR": "Operator: Relational operator to use: equal; different; smaller than; less than or equal to; greater than or greater than or equal to or greater.",
				"LANG_LOGIC_COMPARE_INPUT_A": "'Expression' A to be evaluated.",
				"LANG_LOGIC_COMPARE_INPUT_B": "'Expression' B to be evaluated.",
				"LANG_LOGIC_COMPARE_OUTPUT": "Evaluated binary value (true or false).",
				"LANG_LOGIC_COMPARE_TOOLTIP": "Checks if both inputs are equal, different, smaller than, etc...",
				"LANG_LOGIC_COMPARE_TOOLTIP_EQ": "Checks if both inputs are equal.",
				"LANG_LOGIC_COMPARE_TOOLTIP_NEQ": "Checks if both inputs are different.",
				"LANG_LOGIC_COMPARE_TOOLTIP_LT": "Checks if the first input is smaller than the second one.",
				"LANG_LOGIC_COMPARE_TOOLTIP_LTE": "Checks if the first input is smaller than or equal to the second one.",
				"LANG_LOGIC_COMPARE_TOOLTIP_GT": "Checks if the first input is greater than the second one.",
				"LANG_LOGIC_COMPARE_TOOLTIP_GTE": "Checks if the first input is greater than or equal to the second one.",
				"LANG_LOGIC_OPERATION_NAME": "Logic operation",
				"LANG_LOGIC_OPERATION_DESCRIPTION": "It evaluates the inputs and returns true or false depending on the selected logic operator (AND, OR, XOR, XNOR or LOGICAL IMPLICATION).",
				"LANG_LOGIC_OPERATION_DROPDOWN_OPERATOR": "Operator: Logical operator to evaluate.",
				"LANG_LOGIC_OPERATION_INPUT_A": "A: Logical value to be evaluated.",
				"LANG_LOGIC_OPERATION_INPUT_B": "B: Logical value to be evaluated.",
				"LANG_LOGIC_OPERATION_OUTPUT": "Evaluated binary value (true or false).",
				"LANG_LOGIC_OPERATION_TOOLTIP": "Check if both inputs satisfy a binary operation",
				"LANG_LOGIC_OPERATION_TOOLTIP_AND": "Checks if both inputs are true.",
				"LANG_LOGIC_OPERATION_TOOLTIP_OR": "Checks if either inputs are true.",
				"LANG_LOGIC_OPERATION_TOOLTIP_XOR": "Checks if inputs are different.",
				"LANG_LOGIC_OPERATION_TOOLTIP_XNOR": "Checks if inputs are equal.",
				"LANG_LOGIC_OPERATION_TOOLTIP_IMPLIES": "If... then ...",
				"LANG_LOGIC_BITWISE_OPERATION_NAME": "Bitwise AND, OR or XOR operation",
				"LANG_LOGIC_BITWISE_OPERATION_DESCRIPTION": "This instruction performs a bitwise operation between two numbers. You can select an AND, OR or XOR operation.",
				"LANG_LOGIC_BITWISE_OPERATION_INPUT_A": "A: First number to perform the bitwise operation (it means that the logic operation is on each of the bits of the numbers, one against the other).",
				"LANG_LOGIC_BITWISE_OPERATION_INPUT_B": "B: Second number to perform the bitwise operation (it means that the logic operation is on each of the bits of the numbers, one against the other).",
				"LANG_LOGIC_BITWISE_OPERATION_DROPDOWN_OPERATOR": "Operator: Bitwise operation can be AND (&), OR (|) or XOR (^).",
				"LANG_LOGIC_BITWISE_OPERATION_TOOLTIP": "Bitwise AND (&), OR (|) or XOR (^) operation.",
				"LANG_LOGIC_BITWISE_NOT_NAME": "Bitwise NOT operation",
				"LANG_LOGIC_BITWISE_NOT_DESCRIPTION": "This instruction performs a bitwise not on a number (negates each of the bit of the number).",
				"LANG_LOGIC_BITWISE_NOT_INPUT": "Number: Numbers to negate.",
				"LANG_LOGIC_BITWISE_NOT_OUTPUT": "Returns a number with the resulting negation operation.",
				"LANG_LOGIC_BITWISE_NOT_TOOLTIP": "Bitwise NOT (~) operation.",
				"LANG_LOGIC_BITWISE_SHIFT_NAME": "Logical SHIFT operation",
				"LANG_LOGIC_BITWISE_SHIFT_DESCRIPTION": "This instruction performs a bitwise shift of the given amount of bits on a number. Shifting a number is equivalent to multiply the number by 2^n, being n the number of number of bits to shift.",
				"LANG_LOGIC_BITWISE_SHIFT_INPUT_A": "First operand: Number to shift.",
				"LANG_LOGIC_BITWISE_SHIFT_INPUT_B": "Second operand: Amount of bits to shift.",
				"LANG_LOGIC_BITWISE_SHIFT_OUTPUT": "Returns a number with the resulting shifting operation.",
				"LANG_LOGIC_BITWISE_SHIFT_TOOLTIP": "Bitwise shift to the LEFT (<<) or to the RIGHT (>>).",
				"LANG_LOGIC_BITWISE_COMBINE8_NAME": "Combines two bytes into a 16-bit number",
				"LANG_LOGIC_BITWISE_COMBINE8_DESCRIPTION": "This instruction combines two bytes into a 16-bit number by assigning the 8-bit most significat bits to the first number and the 8-bit least significant bits to the second number.",
				"LANG_LOGIC_BITWISE_COMBINE8_INPUTS": "Numbers: The first number is assigned to the most signficant bits and the second number to the least significant bits.",
				"LANG_LOGIC_BITWISE_COMBINE8_OUTPUT": "Returns a 16-bit number with the resulting operation.",
				"LANG_LOGIC_BITWISE_COMBINE8_TOOLTIP": "Combines byte numbers in a two-byte number containing the upper and the lower bytes.",
				"LANG_LOGIC_BITWISE_COMBINE16_NAME": "Combines two 16-bits numbers into a 32-bit number",
				"LANG_LOGIC_BITWISE_COMBINE16_DESCRIPTION": "This instruction combines two 16-bits numbers into a 32-bit number by assigning the 16-bit most significat bits to the first number and the 16-bit least significant bits to the second number.",
				"LANG_LOGIC_BITWISE_COMBINE16_INPUTS": "Numbers: The first number is assigned to the most signficant bits and the second number to the least significant bits.",
				"LANG_LOGIC_BITWISE_COMBINE16_OUTPUT": "Returns a 32-bit number with the resulting operation.",
				"LANG_LOGIC_BITWISE_COMBINE16_TOOLTIP": "Combines short int numbers (two-byte numbers) in a single long int number (four-byte number) containing the upper and the lower words.",
				"LANG_LOGIC_BITWISE_COMBINE8x4_NAME": "Combines four bytes into a 32-bit number",
				"LANG_LOGIC_BITWISE_COMBINE8x4_DESCRIPTION": "This instruction combines four bytes into a 32-bit number by assigning the 8-bit most significat bits to the first number, the 8-bit least significant bits to the fourth number.",
				"LANG_LOGIC_BITWISE_COMBINE8x4_INPUTS": "The first number is assigned to the most signficant bits and the fourth number to the least significant bits.",
				"LANG_LOGIC_BITWISE_COMBINE8x4_OUTPUT": "Returns a 32-bit number with the resulting operation.",
				"LANG_LOGIC_BITWISE_COMBINE8x4_TOOLTIP": "Combines byte numbers in a four-byte number (32-bit number).",
				"LANG_MATH_SINGLE_TOOLTIP": "Performs floating point operations on numbers",
				"LANG_MATH_SINGLE_TOOLTIP_ROOT": "Returns the square root of a number.",
				"LANG_MATH_SINGLE_TOOLTIP_ABS": "Returns the absolute value of a number.",
				"LANG_MATH_SINGLE_TOOLTIP_NEG": "Returns the negation of a number.",
				"LANG_MATH_SINGLE_TOOLTIP_LN": "Returns the natural logarithm of a number.",
				"LANG_MATH_SINGLE_TOOLTIP_LOG10": "Returns the base 10 logarithm of a number.",
				"LANG_MATH_SINGLE_TOOLTIP_EXP": "Returns e to the power of a number.",
				"LANG_MATH_SINGLE_TOOLTIP_POW10": "Returns 10 to the power of a number.",
				"LANG_MATH_ARITHMETIC_NAME": "Arithmetic operation",
				"LANG_MATH_ARITHMETIC_DESCRIPTION": "Performs the arithmetic operation (addition, subtraction, multiplication, division or power) specified by the operator.",
				"LANG_MATH_ARITHMETIC_DROPDOWN_OPERATOR": "Operator: Arithmetic operator to evaluate (addition, subtraction, multiplication, division or power).",
				"LANG_MATH_ARITHMETIC_INPUT_A": "A: First operand to evaluate.",
				"LANG_MATH_ARITHMETIC_INPUT_B": "B: Second operand to evaluate.",
				"LANG_MATH_ARITHMETIC_OUTPUT": "Result of the arithmetic operation.",
				"LANG_MATH_ARITHMETIC_TOOLTIP": "Arithmetic operation",
				"LANG_MATH_MINMAX_TOOLTIP": "Min/max operation",
				"LANG_CATEGORY_COMMUNICATION": "Communication",
				"LANG_CATEGORY_TEXT": "Text",
				"LANG_CATEGORY_VARIABLES": "Variables",
				"LANG_SUBCATEGORY_ARRAYS": "Arrays",
				"LANG_SUBCATEGORY_OBJECTS": "Objects",
				"LANG_SUBCATEGORY_EEPROM": "EEPROM",
				"LANG_CATEGORY_SOUND": "Sound",
				"LANG_CONTROLS_SETUP_LOOP_SETUP_TITLE": "Setup",
				"LANG_CONTROLS_SETUP_LOOP_LOOP_TITLE": "Loop",
				"LANG_CONTROLS_SETUP_LOOP_NAME": "Setup / Loop",
				"LANG_CONTROLS_SETUP_LOOP_DESCRIPTION": "This instruction must be in every Arduino program and in fact is included by default when starting a new code. It allows to include instructions that will be executed at startup (only during startup) and instructions that will be repeated indefinitely (at the end of the last instruction it starts to execute the first instruction again).",
				"LANG_CONTROLS_SETUP_LOOP_STATEMENT_SETUP": "Setup: set of instructions that are only executed once (at startup).",
				"LANG_CONTROLS_SETUP_LOOP_STATEMENT_LOOP": "Loop: set of instructions that are executed repeatedly.",
				"LANG_CONTROLS_SETUP_LOOP_TOOLTIP": "Blocks in setup will be executed at start, and blocks in Loop will be repeated continuously.",
				"LANG_CONTROLS_SETUP_LOOP_OTA_TOOLTIP": "Blocks in setup will be exectued at start, and blocks in Loop will be repeated continuously. This block is used to upload code wirelessly using Facilino OTA Web Server. Please, let the Loop section to be exectued continuoustly, since OTA Web service needs to be checks periodically.",
				"LANG_PROCEDURES_DEFNORETURN_PROCEDURE": "function (without_return)",
				"LANG_PROCEDURES_DEFNORETURN_PROCEDURE_NAME": "Function with no return (definition)",
				"LANG_PROCEDURES_DEFNORETURN_PROCEDURE_DESCRIPTION": "Implements a function that has no return value. The code to execute in the function must be stacked inside the statement. The function can have multiple input arguments (and of different types) using the mutator (top left icon).",
				"LANG_PROCEDURES_DEFNORETURN_PROCEDURE_MUTATOR": "Allows you to create input parameters of the function. Add as many variables as needed, specify their name and type of variable.",
				"LANG_PROCEDURES_DEFNORETURN_PROCEDURE_FIELD_NAME": "Name: Name of the function.",
				"LANG_PROCEDURES_DEFNORETURN_PROCEDURE_STATEMENTS_DO": "Do: Instructions to execute within the function.",
				"LANG_PROCEDURES_DEFNORETURN_TOOLTIP": "A function with no return value.",
				"LANG_PROCEDURES_DEFNORETURN_DO": "do",
				"LANG_PROCEDURES_DEFRETURN_PROCEDURE": "function (with_return)",
				"LANG_PROCEDURES_DEFRETURN_PROCEDURE_NAME": "Function with return (definition)",
				"LANG_PROCEDURES_DEFRETURN_PROCEDURE_DESCRIPTION": "Implements the call of a function that has a return value. The code to execute in the function must be stacked inside the statement. The function can have multiple input arguments (and of different types) using the mutator (top left icon).",
				"LANG_PROCEDURES_DEFRETURN_PROCEDURE_MUTATOR": "Execute: Instructions to execute within the function.",
				"LANG_PROCEDURES_DEFRETURN_PROCEDURE_FIELD_NAME": "Name: Name of the function.",
				"LANG_PROCEDURES_DEFRETURN_PROCEDURE_STATEMENTS_DO": "Execute: Instructions to execute within the function.",
				"LANG_PROCEDURES_DEFRETURN_RETURN": "return",
				"LANG_PROCEDURES_RETURN_NAME": "Function return",
				"LANG_PROCEDURES_RETURN_DESCRIPTION": "Returns a value (leaves the function returning the indicated value).",
				"LANG_PROCEDURES_RETURN_INPUT_RETURN": "Returns: Value to be returned.",
				"LANG_PROCEDURES_DEFRETURN_TOOLTIP": "A function with a return value.",
				"LANG_PROCEDURES_CALLNORETURN_NAME": "Function with no return (call)",
				"LANG_PROCEDURES_CALLNORETURN_DESCRIPTION": "It makes a call to a function that has no return (which returns no value). If the function has input arguments, these can be passed to the function with the input connectors of the instruction itself.",
				"LANG_PROCEDURES_CALLNORETURN_DROPDOWN_FUNCTION": "Function: Name of the function to call.",
				"LANG_PROCEDURES_CALLNORETURN_TOOLTIP": "Calls a function with no return value.",
				"LANG_PROCEDURES_CALLRETURN_NAME": "Function with return (call)",
				"LANG_PROCEDURES_CALLRETURN_DESCRIPTION": "Performs a call to a function that has a return value returned at the output connector. If the function has input arguments, these can be passed to the function with the input connectors of the instruction itself.",
				"LANG_PROCEDURES_CALLRETURN_DROPDOWN_FUNCTION": "Function: Name of the function to call.",
				"LANG_PROCEDURES_CALLRETURN_OUTPUT": "Value returned by the function.",
				"LANG_PROCEDURES_CALLRETURN_TOOLTIP": "Calls a function with a return value.",
				"LANG_PROCEDURES_IF_RETURN_NAME": "Conditional function return",
				"LANG_PROCEDURES_IF_RETURN_DESCRIPTION": "If the condition is true then it returns a value (leaves the function returning the indicated value)",
				"LANG_PROCEDURES_IF_RETURN_INPUT_IF": "If: Evaluates whether the condition is true.",
				"LANG_PROCEDURES_IF_RETURN_INPUT_RETURN": "Return: Value to be returned.",
				"LANG_CONTROLS_IF_MSG_IF": "If",
				"LANG_CONTROLS_IF_MSG_IF_NAME": "If ... execute ..., else if ... execute, otherwise execute ...",
				"LANG_CONTROLS_IF_MSG_IF_DESCRIPTION": "Executes a set of instructions if a condition is met. Additional conditions may be generated subject to the preconditions not being met ('else if'), each with its set of instructions to execute. In addition, in case none of the previous conditions have been fulfilled, a set of instructions can be executed by default ('else').",
				"LANG_CONTROLS_IF_MSG_IF_STATEMENTS_DO": "Do: Set of instructions to execute conditionally.",
				"LANG_CONTROLS_IF_MSG_IF_MUTATOR_DESC": "It allows to add other conditions to evaluate 'else if' or 'else'.",
				"LANG_CONTROLS_IF_MSG_IF_INPUTS_CONDITION": "If condition: If true, the stacked instructions associated with the condition are executed.",
				"LANG_PROCEDURES_IFRETURN_TOOLTIP": "If the condition is true, then returns this value.",
				"LANG_PROCEDURES_RETURN": "Return",
				"LANG_PROCEDURES_RETURN_TOOLTIP": "Returns a value",
				"LANG_PROCEDURES_CALL_WITHOUT_DEFINITION": "Function call without matching definition",
				"LANG_PROCEDURES_IFRETURN_WARNING": "Warning: This block may only be used within a function with a return value.",
				"LANG_PROCEDURES_MUTATORARG_Field": "variable:",
				"LANG_PROCEDURES_MUTATORCONTAINER_Field": "parameters",
				"LANG_CONTROLS_WHILEUNTIL_OPERATOR_WHILE": "While",
				"LANG_CONTROLS_WHILEUNTIL_OPERATOR_UNTIL": "Until",
				"LANG_CONTROLS_WHILEUNTIL_OPERATOR_WHILE_NAME": "While / Until ...",
				"LANG_CONTROLS_WHILEUNTIL_OPERATOR_WHILE_DESCRIPTION": "Run a code while / until a condition is met. Evaluates the condition before executing the first iteration.",
				"LANG_CONTROLS_WHILEUNTIL_OPERATOR_WHILE_STATEMENTS_DO": "Do: Instructions to execute.",
				"LANG_CONTROLS_WHILEUNTIL_OPERATOR_WHILE_DROPDOWN_MODE": "Mode: The code will run 'while' or 'until' the condition is met.",
				"LANG_CONTROLS_REPEAT": "Repeat",
				"LANG_CONTROLS_REPEAT_NAME": "Repeat ... (a number of times)",
				"LANG_CONTROLS_REPEAT_DESCRIPTION": "Repeat a set of instructions a number of times.",
				"LANG_CONTROLS_REPEAT_STATEMENTS_DO": "Do: Set of instructions to repeat.",
				"LANG_CONTROLS_REPEAT_FIELDS_REPETITIONS": "Repetitions: number of times to repeat.",
				"LANG_CONTROLS_REPEAT_TIMES": "times",
				"LANG_CONTROLS_REPEAT_TOOLTIP": "Repeats a set of instruction a given number of times",
				"LANG_CONTROLS_FOR_INPUT_WITH": "Count with",
				"LANG_CONTROLS_FOR_INPUT_WITH_NAME": "Repeat ... (count)",
				"LANG_CONTROLS_FOR_INPUT_WITH_DESCRIPTION": "Repeat a set of instructions a number of times. It uses a variable to iterate from an initial value to an end value, the number of times the instructions are repeated is the difference between the final value minus the initial value plus one.",
				"LANG_CONTROLS_FOR_INPUT_WITH_STATEMENTS_DO": "Do: Set of instructions to run repetitively",
				"LANG_CONTROLS_FOR_INPUT_WITH_INPUTS_WITH": "With: variable to use in iterations (iterator).",
				"LANG_CONTROLS_FOR_INPUT_WITH_INPUTS_FROM": "From: initial value that the iterator takes.",
				"LANG_CONTROLS_FOR_INPUT_WITH_INPUTS_TO": "To: final value reached by the iterator.",
				"LANG_CONTROLS_FOR_INPUT_FROM": "from",
				"LANG_CONTROLS_FOR_INPUT_TO": "to",
				"LANG_CONTROLS_FOR_INPUT_DO": "Do",
				"LANG_CONTROLS_FOR_TOOLTIP": "Count from a start number to an end number. Each time the count is incremented by one, the variable takes that value then do the statements.",
				"LANG_CONTROLS_FOR_LOOP_WARNING1": "Assuming that the 'from' input is bigger than the 'to' input",
				"LANG_CONTROLS_FOR_LOOP_WARNING2": "Assuming that the 'from' input is smaller than the 'to' input",
				"LANG_CONTROLS_FOR_LOOP_WARNING3": "Incorrect use (not sure how to implement this for loop). Use a while loop instead",
				"LANG_CONTROLS_FOR_LOOP_WARNING4": "Missing input",
				"LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK": "Break out",
				"LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK_NAME": "Break/Continue with next iteration of a loop",
				"LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK_DESCRIPTION": "Instruction to break or continue with the next iteration of a loop",
				"LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK_DROPDOWN_ACTION": "Action: Break or continue with the next iteration of a loop.",
				"LANG_CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE": "Continue with next iteration",
				"LANG_CONTROLS_FLOW_STATEMENTS_INPUT_OFLOOP": "of loop",
				"LANG_CONTROLS_EVERY": "Every",
				"LANG_CONTROLS_EVERY_TOOLTIP": "Execute code every time you want periodically.",
				"LANG_CONTROLS_EVERY_NAME": "Execute every... (elapsed time)",
				"LANG_CONTROLS_EVERY_DESCRIPTION": "Defines a set of 'periodic' tasks to do every elapsed time. This instruction is intended to be used within Arduino's loop, but since it is not using interrupts, the actual execution time will depend on the availability of the processor.",
				"LANG_CONTROLS_EVERY_MUTATOR_DESC": "Create new periodic tasks by adding them to the container.",
				"LANG_CONTROLS_EVERY_STATEMENT_DO": "Do: Set of instructions to execute if corresponding task has elapsed the indicated time.",
				"LANG_CONTROLS_EVERY_INPUT_TIME": "Elapsed Time: Period of the task to execute the code in milliseconds.",
				"LANG_CONTROLS_EVERY_ELAPSED": "Elapsed Time",
				"LANG_CONTROLS_ALTERNATE": "Alternate",
				"LANG_CONTROLS_ALTERNATE_NAME": "Every elapsed time",
				"LANG_CONTROLS_ALTERNATE_DESCRIPTION": "Defines a set of 'alternative' cases to do. It does only one case each time the instruction is executed (when the last case is executed, the first case will be executed next time). This instruction is intended to be used within Arduino's loop.",
				"LANG_CONTROLS_ALTERNATE_MUTATOR_DESC": "Create new cases by adding them to the container.",
				"LANG_CONTROLS_ALTERNATE_STATEMENT_DO": "Do: Set of instructions to do to be executed for that case.",
				"LANG_CONTROLS_ALTERNATE_TOOLTIP": "Execute code alternatively (one case each time this instruction is executed).",
				"LANG_CONTROLS_ALTERNATE_CASE": "Case",
				"LANG_CONTROLS_IF_MSG_THEN": "Do",
				"LANG_CONTROLS_BASE_DELAY_WAIT": "Wait (ms)",
				"LANG_CONTROLS_BASE_DELAY_WAIT_SEC": "Wait (s)",
				"LANG_CONTROLS_BASE_DELAY_WAIT_NAME": "Wait milliseconds",
				"LANG_CONTROLS_BASE_DELAY_WAIT_DESCRIPTION": "Wait for the specified time in milliseconds.",
				"LANG_CONTROLS_BASE_DELAY_WAIT_INPUT_TIME": "Time: Waiting time in milliseconds.",
				"LANG_CONTROLS_BASE_DELAY_WAIT_SEC_NAME": "Wait seconds",
				"LANG_CONTROLS_BASE_DELAY_WAIT_SEC_DESCRIPTION": "Wait for the specified time in seconds.",
				"LANG_CONTROLS_BASE_DELAY_WAIT_SEC_INPUT_TIME": "Time: Waiting time in seconds.",
				"LANG_CONTROL_YIELD": "Yield flow",
				"LANG_CONTROL_YIELD_TOOLTIP": "Yields the main flow to attend other tasks",
				"LANG_CONTROL_ESP_DEEP_SLEEP": "Deep sleep (s)",
				"LANG_CONTROL_ESP_DEEP_SLEEP_NAME": "ESP Deep Sleep",
				"LANG_CONTROL_ESP_DEEP_SLEEP_DESCRIPTION": "Sends to a deep sleep state and wake up after a given amount of time to save energy. In order for this instruction to work properly, the RST pin must be connected to D0 for ESP8266 boards (ESP32 does not require such connection).",
				"LANG_CONTROL_ESP_DEEP_SLEEP_INPUT_TIME": "Time: Waiting time in seconds.",
				"LANG_CONTROL_ESP_DEEP_SLEEP_TOOLTIP": "Sets the board into a deep sleep state for the given seconds with a minimum energy consumption.",
				"LANG_LED_MATRIX_DELAY_WAIT": "Wait (ms)",
				"LANG_LED_MATRIX_DELAY_SHIFT": "Smooth shift?",
				"LANG_CONTROLS_BASE_DELAY_TOOLTIP": "Waits the specified time in milliseconds (ms)",
				"LANG_CONTROLS_BASE_DELAY_SEC_TOOLTIP": "Waits the specified time in seconds (s)",
				"LANG_CONTROLS_BASE_US": "Time from start (us)",
				"LANG_CONTROLS_BASE_US_NAME": "Time from startup (us)",
				"LANG_CONTROLS_BASE_US_DESCRIPTION": "Provides the elapsed time from startup in microseconds.",
				"LANG_CONTROLS_BASE_US_OUTPUT": "Time elapsed from startup in microseconds (long integer).",
				"LANG_CONTROLS_BASE_US_TOOLTIP": "Number of microseconds since the program started (long integer)",
				"LANG_CONTROLS_BASE_MILLIS": "Time from start (ms)",
				"LANG_CONTROLS_BASE_MILLIS_NAME": "Time from startup (ms)",
				"LANG_CONTROLS_BASE_MILLIS_DESCRIPTION": "Provides the elapsed time from startup in milliseconds.",
				"LANG_CONTROLS_BASE_MILLIS_OUTPUT": "Time elapsed from startup in microseconds (long integer).",
				"LANG_CONTROLS_BASE_MILLIS_TOOLTIP": "Number of milliseconds since the program started (long integer)",
				"LANG_CONTROLS_DOWHILE_OPERATOR_DO": "Do",
				"LANG_CONTROLS_DOWHILE_OPERATOR_DO_NAME": "Do ... while/until",
				"LANG_CONTROLS_DOWHILE_OPERATOR_DO_DESCRIPTION": "Run a code while or until a condition is met. The first iteration is always executed.",
				"LANG_CONTROLS_DOWHILE_OPERATOR_DO_STATEMENTS_DO": "Do: Instructions to execute.",
				"LANG_CONTROLS_DOWHILE_OPERATOR_DO_DROPDOWN_MODE": "Mode: The code will run 'while' or 'until' the condition is met.",
				"LANG_CONTROLS_DOWHILE_OPERATOR_DO_INPUT_CONDITION": "Condition: Condition to be evaluated.",
				"LANG_CONTROLS_DOWHILE_TOOLTIP": "While the condition is true, continue doing the statements.",
				"LANG_CONTROLS_EXECUTE": "Execute Arduino code",
				"LANG_CONTROLS_EXECUTE_NAME": "Executes Arduino code",
				"LANG_CONTROLS_EXECUTE_DESCRIPTION": "Executes custom Arduino code. Use with care, because it can generate compilation errors if you don't know what you are doing. Code must usually end with a ';'.",
				"LANG_CONTROLS_EXECUTE_INPUT_CODE": "Code: Arduino cde to include integrated in your Facilino code.",
				"LANG_CONTROLS_EXECUTE_TOOLTIP": "Executes Arduino code (text). Use with caution, as it can easily break the program and prevent it from compiling.",
				"LANG_CONTROLS_SWITCH": "Switch ",
				"LANG_CONTROLS_SWITCH_NAME": "Switch",
				"LANG_CONTROLS_SWITCH_DESCRIPTION": "Execute a set of instructions depending on the case. Compares the input entry with the different cases. If no case can be found, then a set of default instructions can be executed (default).",
				"LANG_CONTROLS_SWITCH_STATEMENTS_DO": "Do: Stackable instruction set.",
				"LANG_CONTROLS_SWITCH_MUTATOR_DESC": "It allows adding other conditions to evaluate 'case' or 'default'.",
				"LANG_CONTROLS_SWITCH_INPUTS_CONDITION": "Case condition: If true, the stacked instructions associated with the condition are executed.",
				"LANG_CONTROLS_SWITCH_TOOLTIP": "Implements a conditional execution of the code depending on the value introduce on each case.",
				"LANG_CONTROLS_FLOW_STATEMENTS_WARNING": "Warning: This block may only be used within a loop.",
				"LANG_CONTROLS_IF_ELSEIF_Field_ELSEIF": "else if",
				"LANG_CONTROLS_IF_ELSEIF_TOOLTIP": "Add a condition to the if block.",
				"LANG_CONTROLS_IF_ELSE_Field_ELSE": "else",
				"LANG_CONTROLS_IF_ELSE_TOOLTIP": "Add a final, catch-all condition to the if block.",
				"LANG_CONTROLS_IF_IF_Field_IF": "if",
				"LANG_CONTROLS_IF_IF_TOOLTIP": "Add, remove, or reorder sections to reconfigure this if block.",
				"LANG_CONTROLS_IF_TOOLTIP_1": "If the condition is true, execute the statements.",
				"LANG_CONTROLS_SWITCH_CASE": "case",
				"LANG_CONTROLS_SWITCH_DEFAULT": "default",
				"LANG_LOGIC_OPERATION_AND": "and",
				"LANG_LOGIC_OPERATION_OR": "or",
				"LANG_LOGIC_OPERATION_XOR": "xor",
				"LANG_LOGIC_OPERATION_XNOR": "xnor",
				"LANG_LOGIC_OPERATION_IMPLIES": "implies",
				"LANG_LOGIC_NEGATE_NAME": "Negation",
				"LANG_LOGIC_NEGATE_DESCRIPTION": "Negates the logic of the input. Returns true in case the input is false or false in case the input is true.",
				"LANG_LOGIC_NEGATE_INPUT": "Input: Logical value to be evaluated.",
				"LANG_LOGIC_NEGATE_OUTPUT": "Evaluated binary value (true or false).",
				"LANG_LOGIC_NEGATE_INPUT_NOT": "not",
				"LANG_LOGIC_NEGATE_TOOLTIP": "Returns the opposite of the input.",
				"LANG_LOGIC_TO_BOOLEAN": "To Boolean",
				"LANG_LOGIC_TO_BOOLEAN_NAME": "To Boolean",
				"LANG_LOGIC_TO_BOOLEAN_DESCRIPTION": "This instruction is useful to convert numbers to a boolean variables.",
				"LANG_LOGIC_TO_BOOLEAN_INPUT_NUMBER": "Number: Number to convert into a boolean.",
				"LANG_LOGIC_TO_BOOLEAN_OUTPUT": "Returns true if a number is bigger than 0 and false otherwise.",
				"LANG_LOGIC_TO_BOOLEAN_TOOLTIP": "If a number is bigger than 1, then it returns true. Otherwise, it returns false",
				"LANG_LOGIC_BOOLEAN_TRUE": "true",
				"LANG_LOGIC_BOOLEAN_FALSE": "false",
				"LANG_LOGIC_BOOLEAN_TRUE_NAME": "Boolean variable",
				"LANG_LOGIC_BOOLEAN_TRUE_DESCRIPTION": "Constant with a binary value 'true' or 'false'. Used to compare or set binary variables or operations.",
				"LANG_LOGIC_BOOLEAN_TRUE_DROPDOWN_VALUE": "Value: Binary value (true or false).",
				"LANG_LOGIC_BOOLEAN_TRUE_OUTPUT": "Selected binary value (true or false).",
				"LANG_LOGIC_BOOLEAN_TOOLTIP": "Returns either true or false.",
				"LANG_MATH_NUMBER_NAME": "Number",
				"LANG_MATH_NUMBER_DESCRIPTION": "Defines a number (integer or decimal).",
				"LANG_MATH_NUMBER_FIELD_NUMBER": "Number: number to be set.",
				"LANG_MATH_NUMBER_OUTPUT": "Defined number.",
				"LANG_MATH_NUMBER_TOOLTIP": "Number",
				"LANG_MATH_SINGLE_OP_NAME": "Math operations (advanced)",
				"LANG_MATH_SINGLE_OP_DESCRIPTION": "This instruction allows advanced mathematical operations such as square roots, absolute value (of integers), negative, natural and base10 logarithms, exponentials or base 10 powers).",
				"LANG_MATH_SINGLE_OP_DROPDOWN_OPERATION": "Operation: Select the operation to perform (square root, absolute value of integers, negative, natural logarithm, logarithm in base 10, exponential or power of 10).",
				"LANG_MATH_SINGLE_OP_INPUT_NUMBER": "Number: Numeric input value on which to perform the operation.",
				"LANG_MATH_SINGLE_OP_OUTPUT": "Value resulting from the mathematical operation. Some operations could provide NaN (Not a Number) if the operation is not defined (eg: logarithm or square root of negative numbers).",
				"LANG_MATH_SINGLE_OP_ROOT": "square root",
				"LANG_MATH_SINGLE_OP_ABSOLUTE": "absolute",
				"LANG_MATH_MODULO_NAME": "Math modulo (division reminder)",
				"LANG_MATH_MODULO_DESCRIPTION": "The module between two numbers is the reminder of the division.",
				"LANG_MATH_MODULO_INPUT_A": "A: Dividend.",
				"LANG_MATH_MODULO_INPUT_B": "B: Divider.",
				"LANG_MATH_MODULO_OUTPUT": "Reminder of division.",
				"LANG_MATH_MODULO_TOOLTIP": "Returns the remainder of the division of the two input numbers.",
				"LANG_MATH_ADVANCED_MAP_MAP": "Map ",
				"LANG_MATH_ADVANCED_MAP_NAME": "Advanced linear mapping",
				"LANG_MATH_ADVANCED_MAP_DESCRIPTION": "Linearly transforms (mapping) a value between two numbers 'From [min - max]' to another value included between two other numbers 'to [min - max]'. Allows you to set a value to be within the specified linear setting.",
				"LANG_MATH_ADVANCED_MAP_INPUT_VALUE": "Value: value to convert.",
				"LANG_MATH_ADVANCED_MAP_INPUT_FROM_MIN": "From (min): minimum value of the input range.",
				"LANG_MATH_ADVANCED_MAP_INPUT_FROM_MAX": "From (max): maximum value of the input range.",
				"LANG_MATH_ADVANCED_MAP_INPUT_TO_MIN": "to (min): minimum value of the output range.",
				"LANG_MATH_ADVANCED_MAP_INPUT_TO_MAX": "to (max): maximum value of the output range.",
				"LANG_MATH_ADVANCED_MAP_OUTPUT": "Mapped (scaled) value.",
				"LANG_MATH_ADVANCED_MAP_FROM": "From [",
				"LANG_MATH_ADVANCED_MAP_HYPHEN": "-",
				"LANG_MATH_ADVANCED_MAP_BRACKET": "]",
				"LANG_MATH_ADVANCED_MAP_TO": "to [",
				"LANG_MATH_ADVANCED_MAP_TOOLTIP": "Re-map the input from a certain range to another.",
				"LANG_MATH_BASE_MAP": "Map ",
				"LANG_MATH_BASE_MAP_NAME": "Linear mapping",
				"LANG_MATH_BASE_MAP_DESCRIPTION": "Linear scaling (mapping) of a number between the range [0 - 1023] in another range between [0 - 'range']. It allows you to set a value (usually of the analog inputs) in another range, eg from 0 to 255.",
				"LANG_MATH_BASE_MAP_INPUT_VALUE": "Value: value to convert.",
				"LANG_MATH_BASE_MAP_INPUT_MAX": "Max: maximum value of the output range.",
				"LANG_MATH_BASE_MAP_OUTPUT": "Mapped (scaled) value.",
				"LANG_MATH_BASE_MAP_VALUE_TO": "Value to [0-",
				"LANG_MATH_BASE_MAP_BRACKET": "]",
				"LANG_MATH_BASE_MAP_TOOLTIP": "Re-map the input from [0-1023] to another.",
				"LANG_ADVANCED_MATH_RANDOM": "Random between",
				"LANG_ADVANCED_MATH_MINMAX_NAME": "Min/max operation",
				"LANG_ADVANCED_MATH_MINMAX_DESCRIPTION": "Retuns the minimum or maximum operation between two numbers.",
				"LANG_ADVANCED_MATH_MINMAX_DROPDOWN_OPERATOR": "Operator: Min/max operator to evaluate.",
				"LANG_ADVANCED_MATH_MINMAX_INPUT_A": "A: First operand to evaluate.",
				"LANG_ADVANCED_MATH_MINMAX_INPUT_B": "B: Second operand to evaluate.",
				"LANG_ADVANCED_MATH_MINMAX_OUTPUT": "Result of the min/max operation.",
				"LANG_ADVANCED_MATH_BETWEEN": "between",
				"LANG_ADVANCED_MATH_RANDOM_NAME": "Random number",
				"LANG_ADVANCED_MATH_RANDOM_DESCRIPTION": "Generates a random number (integer) between two values. The function uses a random seed based on the reading of analogue channel A0 (a typical trick to emulated randomness).",
				"LANG_ADVANCED_MATH_RANDOM_INPUT_MIN": "Min: Initial value of the range.",
				"LANG_ADVANCED_MATH_RANDOM_INPUT_MAX": "Max: End value of the range.",
				"LANG_ADVANCED_MATH_RANDOM_OUTPUT": "Random number generated.",
				"LANG_ADVANCED_MATH_RANDOM_AND": " and ",
				"LANG_ADVANCED_MATH_RANDOM_TOOLTIP": "Returns a random number between the two limits.",
				"LANG_ADVANCED_MATH_CAST": "To number",
				"LANG_ADVANCED_MATH_CAST_NAME": "Cast to a number",
				"LANG_ADVANCED_MATH_CAST_DESCRIPTION": "Converts an expression to a number. This instruction allows you to convert the input data to the specified type.",
				"LANG_ADVANCED_MATH_CAST_DROPDOWN_TYPES": "Type: Data type to convert (Integer: It occupies 2 bytes in memory and can represent numbers from -32,768 to 32,767.; Long integer: It occupies 4 bytes in memory and can represent numbers from -2,147,483,648 to 2,147,483,647.; Decimal: It occupies 4 bytes in memory and can represent real numbers.; Byte: It occupies 1 byte in memory and can represent numbers from 0 to 255.).",
				"LANG_ADVANCED_MATH_CAST_INPUT_VALUE": "Value: Value to convert.",
				"LANG_ADVANCED_MATH_CAST_OUTPUT": "Converted number.",
				"LANG_VARIABLES_TYPE_INTEGER": "Integer",
				"LANG_VARIABLES_TYPE_INTEGER_ARRAY": "Integer array",
				"LANG_VARIABLES_TYPE_INTEGER_LONG": "Long Integer",
				"LANG_VARIABLES_TYPE_INTEGER_LONG_ARRAY": "Long Integer array",
				"LANG_VARIABLES_TYPE_INTEGER_SHORT": "Short Integer",
				"LANG_VARIABLES_TYPE_INTEGER_SHORT_ARRAY": "Short Integer array",
				"LANG_VARIABLES_TYPE_BYTE": "Byte",
				"LANG_VARIABLES_TYPE_BYTE_ARRAY": "Byte array",
				"LANG_VARIABLES_TYPE_FLOAT": "Float",
				"LANG_VARIABLES_TYPE_FLOAT_ARRAY": "Float array",
				"LANG_ADVANCED_MATH_CAST_TOOLTIP": "Cast a number",
				"LANG_ADVANCED_MATH_SINUSOID": "Sinusoid",
				"LANG_ADVANCED_MATH_SINUSOID_NAME": "Sinusoidal wave",
				"LANG_ADVANCED_MATH_SINUSOID_DESCRIPTION": "This instruction allows to generate sine waves with definable amplitude, frequency, phase and mean value. The resulting value depends on the evaluated time.",
				"LANG_ADVANCED_MATH_SINUSOID_INPUT_AMPLITUDE": "Amplitude: amplitude of the signal (difference between peak and peak).",
				"LANG_ADVANCED_MATH_SINUSOID_INPUT_FREQUENCY": "Frequency: Number of times the signal is repeated per second (Hz).",
				"LANG_ADVANCED_MATH_SINUSOID_INPUT_PHASE": "Phase: Horizontal shift of the signal (angle in degrees).",
				"LANG_ADVANCED_MATH_SINUSOID_INPUT_MEAN": "Mean value: Vertical displacement of the signal.",
				"LANG_ADVANCED_MATH_SINUSOID_INPUT_TIME": "Time: The instant of time in which the signal is evaluated (in microseconds).",
				"LANG_ADVANCED_MATH_SINUSOID_AMPLITUDE": "Amplitude",
				"LANG_ADVANCED_MATH_SINUSOID_FREQ": "Frequency",
				"LANG_ADVANCED_MATH_SINUSOID_PHASE": "Phase",
				"LANG_ADVANCED_MATH_SINUSOID_OFFSET": "Offset",
				"LANG_ADVANCED_MATH_SINUSOID_TIME": "Time",
				"LANG_ADVANCED_MATH_SINUSOID_OUTPUT": "Resultant value of the signal.",
				"LANG_ADVANCED_MATH_SINUSOID_TOOLTIP": "Generates a sinusoid wave. Amplitude: Wave amplitude; Frequency: Wave frequency in Hz; Phase: Wave phase in radians; Offset: Offset value added to the wave; Time: Time instant in which the wave is evaluated.",
				"LANG_VARIABLES_GET": "Var",
				"LANG_VARIABLES_GET_NAME": "Get variable",
				"LANG_VARIABLES_GET_ARRAY_NAME": "Get array variable element",
				"LANG_VARIABLES_GET_TOOLTIP": "Returns the value of a variable.",
				"LANG_VARIABLES_SET": "Var",
				"LANG_VARIABLES_SET_AS": "=",
				"LANG_VARIABLES_SET_NAME": "Set variable",
				"LANG_VARIABLES_SET_ARRAY_NAME": "Set array variable element",
				"LANG_VARIABLES_SET_TOOLTIP": "Sets the value of a variable.",
				"LANG_VARIABLES_GLOBAL": "Variable",
				"LANG_VARIABLES_GLOBAL_NAME": "Declare global variable",
				"LANG_VARIABLES_GLOBAL_EQUALS": "=",
				"LANG_VARIABLES_GLOBAL_TOOLTIP": "Declares and defines a GLOBAL variable of type int or String.",
				"LANG_VARIABLES_GLOBAL_TYPE": "of type ",
				"LANG_VARIABLES_GLOBAL_TYPE_NAME": "Declare global variable with type",
				"LANG_VARIABLES_GLOBAL_CUSTOM_TYPE_NAME": "Declare global variable with custom type",
				"LANG_VARIABLES_TYPE_STRING": "String",
				"LANG_VARIABLES_TYPE_CHAR": "Char",
				"LANG_VARIABLES_TYPE_BOOL": "Boolean",
				"LANG_VARIABLES_GLOBAL_TOOLTIP2": "Declares and defines a GLOBAL variable of the given type.",
				"LANG_VARIABLES_GLOBAL_TOOLTIP3": "Declares and defines a user-defined GLOBAL variable using Arduino code.",
				"LANG_VARIABLES_LOCAL": "LOCAL variable ",
				"LANG_VARIABLES_LOCAL_NAME": "Declare local variable",
				"LANG_VARIABLES_LOCAL_EQUALS": "=",
				"LANG_VARIABLES_LOCAL_TOOLTIP": "Declare and define a LOCAL variable of type int or String.",
				"LANG_VARIABLES_LOCAL_TYPE_NAME": "Declare local variable with type",
				"LANG_VARIABLES_LOCAL_CUSTOM_TYPE_NAME": "Declare local variable with custom type",
				"LANG_VARIABLES_LOCAL_TYPE": "of type ",
				"LANG_VARIABLES_LOCAL_TOOLTIP2": "Declares and defines a LOCAL variable of the given type.",
				"LANG_VARIABLES_LOCAL_TOOLTIP3": "Declares a user-defined LOCAL variable using Arduino code.",
				"LANG_VARIABLES_GLOBAL_VOLATILE": "Declare GLOBAL SHARED Variable ",
				"LANG_VARIABLES_GLOBAL_VOLATILE_TYPE_NAME": "Declare global shared variable with type",
				"LANG_VARIABLES_GLOBAL_VOLATILE_TOOLTIP": "Declares and defines a GLOBAL shared (volatile, to be used in tasks and interrupts) variable of the given type.",
				"LANG_VARIABLES_CALL_WITHOUT_DEFINITION": "This variable is not declared.",
				"LANG_MATH_ARRAY_GET": "Get",
				"LANG_MATH_ARRAY_GET_NAME": "Get Element from an Array",
				"LANG_MATH_ARRAY_GET_DESCRIPTION": "This instruction returns the element of an array at the indicated position. The first element of an array variable is position 0.",
				"LANG_MATH_ARRAY_GET_INPUT_ARRAY": "Array: Array variable.",
				"LANG_MATH_ARRAY_GET_FIELD_INDEX": "Index: Position of the element in the array.",
				"LANG_MATH_ARRAY_GET_OUTPUT": "Returns a number with the element at the indicated position.",
				"LANG_MATH_ARRAY_SET": "Set",
				"LANG_MATH_ARRAY_SET_NAME": "Set Element of an Array",
				"LANG_MATH_ARRAY_SET_DESCRIPTION": "This instruction sets the value of an element of an array at the indicated position. The first element of an array variable is position 0.",
				"LANG_MATH_ARRAY_SET_INPUT_ARRAY": "Array variable.",
				"LANG_MATH_ARRAY_SET_INPUT_NUMBER": "Value to set.",
				"LANG_MATH_ARRAY_SET_FIELD_INDEX": "Index: Position of the element in the array.",
				"LANG_MATH_ARRAY_GET_TOOLTIP": "Gets an element from an array.",
				"LANG_MATH_ARRAY_SET_TOOLTIP": "Sets an element from an array.",
				"LANG_VARIABLES_ARRAY": "Build Array",
				"LANG_VARIABLES_ARRAY_NAME": "Generic array constructor",
				"LANG_VARIABLES_ARRAY_DESCRIPTION": "Defines a constant array.",
				"LANG_VARIABLES_ARRAY_MUTATOR_DESC": "It allows to add elements to the array.",
				"LANG_VARIABLES_ARRAY_INPUT_ELEMENT": "Element: Element to add to the array.",
				"LANG_VARIABLES_ARRAY_OUTPUT": "Constant array",
				"LANG_VARIABLES_ARRAY2_NAME": "Array (with two numbers) constructor",
				"LANG_VARIABLES_ARRAY2_DESCRIPTION": "Defines an array constant with two numbers.",
				"LANG_VARIABLES_ARRAY2_INPUT1": "Element 1: First element of the array.",
				"LANG_VARIABLES_ARRAY2_INPUT2": "Element 2: Second element of the array.",
				"LANG_VARIABLES_ARRAY2_OUTPUT": "Constant array of dimension 2.",
				"LANG_VARIABLES_ARRAY3_DESCRIPTION": "Defines an array constant with three numbers.",
				"LANG_VARIABLES_ARRAY3_INPUT1": "Element 1: First element of the array.",
				"LANG_VARIABLES_ARRAY3_INPUT2": "Element 2: Second element of the array.",
				"LANG_VARIABLES_ARRAY3_INPUT3": "Element 3: Third element of the array.",
				"LANG_VARIABLES_ARRAY3_OUTPUT": "Constant array of dimension 3.",
				"LANG_VARIABLES_ARRAY3_NAME": "Array (with three numbers) constructor",
				"LANG_VARIABLES_ARRAY4_NAME": "Array (with four numbers) constructor",
				"LANG_VARIABLES_ARRAY4_DESCRIPTION": "Defines an array constant with four numbers.",
				"LANG_VARIABLES_ARRAY4_INPUT1": "Element 1: First element of the array.",
				"LANG_VARIABLES_ARRAY4_INPUT2": "Element 2: Second element of the array.",
				"LANG_VARIABLES_ARRAY4_INPUT3": "Element 3: Third element of the array.",
				"LANG_VARIABLES_ARRAY4_INPUT4": "Element 4: Fourth element of the array.",
				"LANG_VARIABLES_ARRAY4_OUTPUT": "Constant array of dimension 4.",
				"LANG_VARIABLES_ARRAY_TOOLTIP": "Creates a generic array constructor.",
				"LANG_VARIABLES_ARRAY_DECODE": "Decode Array",
				"LANG_VARIABLES_ARRAY_DECODE_NAME": "Decodes (unpacks) an array into several items",
				"LANG_VARIABLES_ARRAY_DECODE_DESCRIPTION": "This instruction decodes the elements of an array into several items (copies chunks of memory data of the original array into the items). By clicking on the 'star' icon, you can add items. The size of the variables used in each of the items affects to the decoding process as follows: the array is treated as a byte array (no matter the original type of the array variable) and then, each of the items points to contiguous chunks of data memory. Thus, if the items are 1-byte  sized, the instruction is equivalent to copy them, byte by byte; but if items are 2-byte or 4-byte sized variables, then the instruction copies the values considering the size of the items. This is useful when you decode the array (usually a telegram) into several items.",
				"LANG_VARIABLES_ARRAY_DECODE_MUTATOR_DESC": "Add items to store the decoded array",
				"LANG_VARIABLES_ARRAY_DECODE_INPUT_ARRAY": "Array: Array variable.",
				"LANG_VARIABLES_ARRAY_DECODE_INPUT_ITEMS": "Items: Items to decode.",
				"LANG_VARIABLES_ARRAY_DECODE_TOOLTIP": "Decodes an array into separated values.",
				"LANG_VARIABLES_ARRAY_ENCODE": "Encode Array",
				"LANG_VARIABLES_ARRAY_ENCODE_NAME": "Encodes (packs) several items into an array",
				"LANG_VARIABLES_ARRAY_ENCODE_DESCRIPTION": "This instruction encodes items into an array variable. The size of the array variable must be equal to the sum of all item variable sizes. All items will be encoded in contiguous chuncks of memory data (the array is treated as a byte array, no matter the original type) and the items are copies into the array at their corresponding position (the size of an item will affect to position of the posterior item).",
				"LANG_VARIABLES_ARRAY_ENCODE_MUTATOR_DESC": "Add items to encode into an array",
				"LANG_VARIABLES_ARRAY_ENCODE_INPUT_ARRAY": "Array: Array variable.",
				"LANG_VARIABLES_ARRAY_ENCODE_INPUT_ITEMS": "Items: Items to encode.",
				"LANG_VARIABLES_ARRAY_ENCODE_TOOLTIP": "Encodes an array with provided data values. The size of the array must be appropriate for the provided amount of data.",
				"LANG_VARIABLES_ARRAY_INTO": "into",
				"LANG_VARIABLES_ARRAY_WITH": "with",
				"LANG_VARIABLES_ARRAY_ITEM": "Item",
				"LANG_VARIABLES_ARRAY_ENCODE_ITEM": "Item to encode",
				"LANG_VARIABLES_ARRAY_DECODE_ITEM": "Item",
				"LANG_VARIABLES_ARRAY_INDEX" : "at position",
				"LANG_VARIABLES_ARRAY_LOCAL": "Declare LOCAL Array variable ",
				"LANG_VARIABLES_ARRAY_LOCAL_NAME": "Declare local array variable",
				"LANG_VARIABLES_ARRAY_LOCAL_TYPE_NAME": "Declare local array variable with type",
				"LANG_VARIABLES_ARRAY_LOCAL_TOOLTIP": "Declare and define a LOCAL array variable of type int.",
				"LANG_VARIABLES_ARRAY_GLOBAL": "Declare GLOBAL Array variable ",
				"LANG_VARIABLES_ARRAY_GLOBAL_NAME": "Declare global array variable",
				"LANG_VARIABLES_ARRAY_GLOBAL_TYPE_NAME": "Declare global array variable with type",
				"LANG_VARIABLES_ARRAY_GLOBAL_VOLATILE_NAME": "Declare global shared array variable with type",
				"LANG_VARIABLES_ARRAY_GLOBAL_TOOLTIP": "Declares and defines a GLOBAL array variable of type int.",
				"LANG_VARIABLES_ARRAY_GLOBAL_TOOLTIP2": "Declares and defines a GLOBAL array variable of the given type.",
				"LANG_VARIABLES_ARRAY_GLOBAL_VOLATILE": "Declare GLOBAL SHARED Array Variable ",
				"LANG_VARIABLES_ARRAY_GLOBAL_VOLATILE_TOOLTIP": "Declares and defines a GLOBAL shared (volatile, to be used in tasks and interrupts) array variable of the given type.",
				"LANG_TEXT_TEXT_TOOLTIP": "A letter, word, or line of text.",
				"LANG_TEXT_CHAR_TOOLTIP": "A character.",
				"LANG_TEXT_JOIN_Field_CREATEWITH": "Create text with",
				"LANG_TEXT_JOIN_NAME": "Concatenates text",
				"LANG_TEXT_JOIN_TOOLTIP": "Create a piece of text by joining together any number of items.",
				"LANG_TEXT_APPEND_TO_NAME": "Appends text to a String variable",
				"LANG_TEXT_APPEND_TO": "to",
				"LANG_TEXT_APPEND_APPENDTEXT": "Append",
				"LANG_TEXT_APPEND_TOOLTIP": "Append some text to string variable %1.",
				"LANG_TEXT_LENGTH_NAME": "Text length",
				"LANG_TEXT_LENGTH_INPUT_LENGTH": "length",
				"LANG_TEXT_LENGTH_TOOLTIP": "Returns number of letters (including spaces) in the provided text.",
				"LANG_TEXT_SET": "Set",
				"LANG_TEXT_LENGTH_INPUT_LOWER": "to lower case",
				"LANG_TEXT_LENGTH_LOWER_NAME": "To lower case",
				"LANG_TEXT_LENGTH_LOWER_TOOLTIP": "Sets a string to lower case.",
				"LANG_TEXT_LENGTH_INPUT_UPPER": "to upper case",
				"LANG_TEXT_LENGTH_UPPER_NAME": "Sets a string to upper case",
				"LANG_TEXT_LENGTH_UPPER_TOOLTIP": "Sets a string in upper case.",
				"LANG_ADVANCED_SERIAL_SPECIAL": "Special Chars",
				"LANG_ADVANCED_SERIAL_SPECIAL_NAME": "Write special character",
				"LANG_ADVANCED_SERIAL_SPECIAL_TAB": "Tab",
				"LANG_ADVANCED_SERIAL_SPECIAL_CARRIAGE_RETURN": "Carriage Return",
				"LANG_ADVANCED_SERIAL_SPECIAL_LINE_FEED": "Line Feed",
				"LANG_ADVANCED_SERIAL_SPECIAL_QUOTE": "Quote",
				"LANG_ADVANCED_SERIAL_SPECIAL_DOUBLE_QUOTE": "Double quote",
				"LANG_ADVANCED_SERIAL_SPECIAL_TOOLTIP": "Writes special Chars.",
				"LANG_ADVANCED_SERIAL_WRITE_NAME": "Serial write",
				"LANG_ADVANCED_SERIAL_WRITE_TOOLTIP": "Writes an array of characters on the serial port",
				"LANG_TEXT_TEXT_NAME": "Text",
				"LANG_TEXT_CHAR_NAME": "Character",
				"LANG_TEXT_CHARAT_NAME": "Get character from text",
				"LANG_TEXT_CHARAT": "Char at",
				"LANG_TEXT_CHARAT_TOOLTIP": "Returns the char at the specified position (starting from 0)",
				"LANG_TEXT_EQUALSIGNORECASE_NAME": "Compares text",
				"LANG_TEXT_EQUALSIGNORECASE_EQUAL": " =",
				"LANG_TEXT_EQUALSIGNORECASE_QUESTION": "?",
				"LANG_TEXT_EQUALSIGNORECASE_TOOLTIP": "Checks if both input strings are equal, regardless of the case.",
				"LANG_TEXT_SUBSTRING": "Crop ",
				"LANG_TEXT_SUBSTRING_NAME": "Get substring",
				"LANG_TEXT_SUBSTRING_FROM": "from",
				"LANG_TEXT_SUBSTRING_TO": "to",
				"LANG_TEXT_SUBSTRING_TOOLTIP": "Obtain a substring from the input string with the characters between the two input numbers.",
				"LANG_TEXT_SEARCH": "Search",
				"LANG_TEXT_SEARCH_NAME": "Search text",
				"LANG_TEXT_IN": "in",
				"LANG_TEXT_FIRST": "First instance",
				"LANG_TEXT_LAST": "Last instance",
				"LANG_TEXT_SEARCH_TOOLTIP": "Checks if a text is found in another text string. Returns the index of the first/last instance found.",
				"LANG_TEXT_CONTAINS": "Contains",
				"LANG_TEXT_CONTAINS_NAME": "Contains text?",
				"LANG_TEXT_EXPRESSION": "expression",
				"LANG_TEXT_CONTAINS_TOOLTIP": "Checks if a text string contains an expression. Returns true or false.",
				"LANG_TEXT_CAST": "To text",
				"LANG_TEXT_CAST_NAME": "Converts to text",
				"LANG_TEXT_FORMAT": "with format",
				"LANG_TEXT_CSV_NAME": "Array to CSV string",
				"LANG_TEXT_CSV": "To CSV",
				"LANG_TEXT_CSV_LENGTH": "Length",
				"LANG_TEXT_CSV_DECIMAL": "Decimal",
				"LANG_TEXT_CSV_TOOLTIP": "Converts an array into a CSV (comma separated value) string",
				"LANG_TEXT_CAST_TOOLTIP": "Cast the number/variable into a text",
				"LANG_TEXT_NUMBER_CAST": "To number",
				"LANG_TEXT_NUMBER_CAST_NAME": "Text to number",
				"LANG_TEXT_NUMBER_CAST_TOOLTIP": "Converts the string into a number",
				"LANG_VARIABLES_TYPE_CHAR": "Char",
				"LANG_TEXT_CREATE_JOIN_ITEM_TITLE_ITEM": "element",
				"LANG_TEXT_CREATE_JOIN_ITEM_TOOLTIP": "Add an item to the text.",
				"LANG_TEXT_CREATE_JOIN_TITLE_JOIN": "join",
				"LANG_TEXT_CREATE_JOIN_TOOLTIP": "Add, remove, or reorder sections to reconfigure this text block.",
				"LANG_ADVANCED_SERIAL_AVAILABLE_WARNING": "You need to connect a device or PC connected to your remote device.",
				"LANG_ADVANCED_SERIAL_AVAILABLE": "Serial Available",
				"LANG_CONTROLS_REPEAT_INPUT_DO": "do",
				"LANG_ADVANCED_SERIAL_AVAILABLE_NAME": "Serial availability",
				"LANG_ADVANCED_SERIAL_AVAILABLE_TOOLTIP": "Check whether the serial port is available or not",
				"LANG_ADVANCED_SERIAL_PARSEINT": "Serial Read Integer",
				"LANG_ADVANCED_SERIAL_PARSEINT_NAME": "Serial parse integer",
				"LANG_ADVANCED_SERIAL_PARSEINT_TOOLTIP": "First valid (long) integer number from the serial buffer",
				"LANG_ADVANCED_SERIAL_PARSEFLOAT": "Serial Read Decimal",
				"LANG_ADVANCED_SERIAL_PARSEFLOAT_NAME": "Serial parse decimal",
				"LANG_ADVANCED_SERIAL_PARSEFLOAT_TOOLTIP": "First valid decimal number from the serial buffer",
				"LANG_ADVANCED_SERIAL_PRINT": "Serial Print",
				"LANG_ADVANCED_SERIAL_PRINT_NAME": "Serial print",
				"LANG_ADVANCED_SERIAL_PRINT_TOOLTIP": "Prints data as ASCII text.",
				"LANG_ADVANCED_SERIAL_PRINTLN": "Serial Print Line",
				"LANG_ADVANCED_SERIAL_PRINTLN_NAME": "Serial print new line",
				"LANG_ADVANCED_SERIAL_PRINTLN_TOOLTIP": "Prints data as ASCII text and adds a Carriage Return (CR).",
				"LANG_ADVANCED_SERIAL_PLOT": "Serial Plot Data",
				"LANG_ADVANCED_SERIAL_PLOT_NAME": "Serial plot",
				"LANG_ADVANCED_SERIAL_PLOT_TOOLTIP": "Sends serial data to be plot in Arduino's Serial Plotter.",
				"LANG_PLOT_JOIN_Field_CREATEWITH": "Serial Plot Multiple Data",
				"LANG_PLOT_JOIN_TOOLTIP": "Joins data for a plot.",
				"LANG_PLOT_CREATE_JOIN_ITEM_TITLE_ITEM": "data",
				"LANG_PLOT_CREATE_JOIN_ITEM_TOOLTIP": "Add an item to the plot.",
				"LANG_PLOT_CREATE_JOIN_TITLE_JOIN": "Plot",
				"LANG_PLOT_JOIN_NAME": "Serial multiple plot",
				"LANG_PLOT_CREATE_JOIN_TOOLTIP": "Add multiple elements to plot.",
				"LANG_ADVANCED_SERIAL_READ": "Serial Read",
				"LANG_ADVANCED_SERIAL_READ_NAME": "Serial read",
				"LANG_ADVANCED_SERIAL_READ_TOOLTIP": "Reads incoming serial data from serial port as bytes.",
				"LANG_ADVANCED_SERIAL_READSTRING": "Serial Read String",
				"LANG_ADVANCED_SERIAL_READSTRING_NAME": "Read string",
				"LANG_ADVANCED_SERIAL_READSTRING_TOOLTIP": "Reads incoming serial data from serial port as ASCII text.",
				"LANG_ADVANCED_SERIAL_WRITE": "Serial Write",
				"LANG_ADVANCED_SERIAL_WRITE": "Serial Write",
				"LANG_ADVANCED_CONVERSION_CONVERT": "Convert",
				"LANG_ADVANCED_CONVERSION_DECIMAL": "Decimal",
				"LANG_ADVANCED_CONVERSION_HEXADECIMAL": "Hexadecimal",
				"LANG_ADVANCED_CONVERSION_OCTAL": "Octal",
				"LANG_ADVANCED_CONVERSION_BINARY": "Binary",
				"LANG_ADVANCED_CONVERSION_VALUE": "value",
				"LANG_ADVANCED_CONVERSION_NAME": "Serial convert",
				"LANG_ADVANCED_CONVERSION_TOOLTIP": "Convert a number from one base to another.",
				"LANG_ADVANCED_SERIAL_TIMEOUT": "Set timeout [ms]",
				"LANG_ADVANCED_SERIAL_TIMEOUT_NAME": "Serial timeout",
				"LANG_ADVANCED_SERIAL_TIMEOUT_TOOLTIP": "Sets timeout for serial reception (in milliseconds).",
				"LANG_LCD_CLEAR": "LCD Clear",
				"LANG_LCD_CLEAR_NAME": "Clear LCD",
				"LANG_LCD_CLEAR_TOOLTIP": "Clear LCD",
				"LANG_LCD_DEF": "Define LCD (16x2)",
				"LANG_LCD_DEF1": "Define LCD I2C (16x2)",
				"LANG_LCD_DEF_NAME": "LCD (16x2)",
				"LANG_LCD_DEF1_NAME": "LCD (16x2) with I2C ",
				"LANG_LCD_PINS": "Data PINs",
				"LANG_LCD_DEF_TOOLTIP": "Block that defines the LCD",
				"LANG_LCD_DEF1_TOOLTIP": "Block that defines the LCD connected to I2C",
				"LANG_LCD_PRINT": "LCD Print",
				"LANG_LCD_PRINT_NAME" :"Prints on LCD",
				"LANG_LCD_CURSOR": "LCD Set Cursor",
				"LANG_LCD_CURSOR_NAME": "Set LCD cursor",
				"LANG_LCD_SCROLL": "LCD Scroll",
				"LANG_LCD_SCROLL_NAME": "Scroll text on LCD",
				"LANG_LCD_PRINT_POSITION": "Set text position?",
				"LANG_LCD_ROW": "Row",
				"LANG_LCD_COLUMN": "Column",
				"LANG_LCD_DELAY_TIME": "Delay (ms)",
				"LANG_LCD_PRINT_TOOLTIP": "Prints a String in the LCD at the specified position or the next available one.",
				"LANG_LCD_CURSOR_TOOLTIP": "Sets the cursor to print a text",
				"LANG_LCD_SCROLL_TOOLTIP": "Scrolls a String in the LCD at the specified row",
				"LANG_LCD_SETBACKLIGHT_NAME": "Set LCD backlight",
				"LANG_LCD_SETBACKLIGHT": "LCD SetBacklight(",
				"LANG_LCD_SETBACKLIGHT_CLOSE": ")",
				"LANG_LCD_SETBACKLIGHT_TOOLTIP": "Sets the backlight of the LCD screen.",
				"LANG_ZUM_PIEZO_BUZZERAV": "Advanced Buzzer",
				"LANG_ZUM_PIEZO_BUZZERAV_NAME": "Generate sound (advanced)",
				"LANG_ZUM_PIEZO_BUZZERAV_PIN": "PIN",
				"LANG_ZUM_PIEZO_BUZZERAV_TONE": "Tone",
				"LANG_ZUM_PIEZO_BUZZERAV_DURATION": "Duration [ms]",
				"LANG_ZUM_PIEZO_BUZZERAV_TOOLTIP": "Piezo Buzzer Advanced",
				"LANG_ADVANCED_INOUT_ANALOG_READ": "Read analog PIN",
				"LANG_ADVANCED_INOUT_ANALOG_READ_NAME": "Read Analog Pin",
				"LANG_ADVANCED_INOUT_ANALOG_READ_TOOLTIP": "Reads the value from a specified analog pin",
				"LANG_ADVANCED_INOUT_ANALOG_WRITE": "Write analog PIN",
				"LANG_ADVANCED_INOUT_ANALOG_WRITE_NAME": "Write analog Pin",
				"LANG_ADVANCED_INOUT_PWM_WRITE": "Write PWM PIN",
				"LANG_ADVANCED_INOUT_ANALOG_WRITE_VALUE": "dutycicle",
				"LANG_ADVANCED_INOUT_ANALOG_WRITE_TOOLTIP": "Write a value between 0 and 255 to a specific analog output PIN",
				"LANG_ADVANCED_BUILTIN_LED": "Built-in LED",
				"LANG_ADVANCED_BUILTIN_LED_NAME": "Turns on/off or toggles the on-board LED",
				"LANG_ADVANCED_BUILTIN_LED_STATE": "state",
				"LANG_ADVANCED_BUILTIN_LED_ON": "ON",
				"LANG_ADVANCED_BUILTIN_LED_OFF": "OFF",
				"LANG_ADVANCED_BUILTIN_LED_TOGGLE": "Toggle",
				"LANG_ADVANCED_BUILTIN_LED_TOOLTIP": "Built-in LED that is internally connected to PIN 13",
				"LANG_ADVANCED_INOUT_DIGITAL_READ": "Read digital PIN",
				"LANG_ADVANCED_INOUT_DIGITAL_READ_NAME": "Read digital Pin",
				"LANG_ADVANCED_INOUT_DIGITAL_READ_TOOLTIP": "Reads the value from a specified digital pin",
				"LANG_ADVANCED_INOUT_DIGITAL_WRITE": "Write digital",
				"LANG_ADVANCED_INOUT_DIGITAL_WRITE_NAME": "Write digital",
				"LANG_ADVANCED_INOUT_DIGITAL_WRITE_PIN": "PIN",
				"LANG_ADVANCED_INOUT_DIGITAL_WRITE_STATE": "state",
				"LANG_ADVANCED_INOUT_DIGITAL_WRITE_TOOLTIP": "Write a value in a specified digital pin",
				"LANG_ADVANCED_INOUT_DIGITAL_MODE": "Set mode",
				"LANG_ADVANCED_INOUT_DIGITAL_MODE_NAME": "Sets digital pin mode",
				"LANG_ADVANCED_INOUT_DIGITAL_MODE_PIN": "PIN",
				"LANG_ADVANCED_INOUT_DIGITAL_MODE_MODE": "Mode",
				"LANG_ADVANCED_INOUT_DIGITAL_MODE_OUTPUT": "Output",
				"LANG_ADVANCED_INOUT_DIGITAL_MODE_INPUT": "Input",
				"LANG_ADVANCED_INOUT_DIGITAL_MODE_PULLUP": "Input Pull-Up",
				"LANG_ADVANCED_INOUT_DIGITAL_MODE_TOOLTIP": "Sets digital pin mode",
				"LANG_ADVANCED_INOUT_ANALOG_MODE": "Set ADC2",
				"LANG_ADVANCED_INOUT_ANALOG_MODE_NAME": "Sets ADC2 mode",
				"LANG_ADVANCED_INOUT_ANALOG_MODE_MODE": "Mode",
				"LANG_ADVANCED_INOUT_ANALOG_MODE_ANALOG": "Analog",
				"LANG_ADVANCED_INOUT_ANALOG_MODE_ANALOG_WIFI": "Analog+WiFi",
				"LANG_ADVANCED_INOUT_ANALOG_MODE_TOOLTIP": "Sets ADC2 mode",
				"LANG_ADVANCED_HIGHLOW_HIGH": "HIGH",
				"LANG_ADVANCED_HIGHLOW_LOW": "LOW",
				"LANG_ADVANCED_HIGHLOW_NAME": "Digital value HIGH/LOW",
				"LANG_ADVANCED_HIGHLOW_TOOLTIP": "Returns HIGH or LOW",
				"LANG_VARIABLES_PIN_ANALOG": "Analog input PIN",
				"LANG_VARIABLES_PIN_ANALOG_NAME": "Analog Pin",
				"LANG_VARIABLES_PIN_ANALOG_OUT": "Analog output PIN",
				"LANG_VARIABLES_PIN_TOOLTIP": "A digital PIN.",
				"LANG_VARIABLES_PIN_ANALOG_TOOLTIP": "An analog input PIN.",
				"LANG_VARIABLES_PIN_PWM_TOOLTIP": "A digital PWM PIN (a.k.a analog output)",
				"LANG_VARIABLES_PIN_DIGITAL": "Digital PIN",
				"LANG_VARIABLES_PIN_DIGITAL_NAME": "Digital Pin",
				"LANG_VARIABLES_PIN_PWM": "PWM PIN",
				"LANG_VARIABLES_PIN_PWM_NAME": "Digital PWM Pin",
				"LANG_BQ_BUTTON": "Button",
				"LANG_BQ_BUTTON_NAME": "Read the status of a button",
				"LANG_BQ_BUTTON_CASE_NAME": "Discriminates the status of a button",
				"LANG_BQ_BUTTON_LONG_SHORT_NAME": "Short or long click with a button",
				"LANG_BQ_BUTTON_PIN": "PIN",
				"LANG_BQ_BUTTON_TOOLTIP": "Read button state",
				"LANG_BQ_BUTTON_CASE_TOOLTIP": "Read button and execute case",
				"LANG_BUTTON_PRESSED": "Pressed",
				"LANG_BUTTON_NOT_PRESSED": "Released",
				"LANG_BUTTON_LONG_PRESSED": "Long-click",
				"LANG_BUTTON_SHORT_PRESSED": "Short-click",
				"LANG_BQ_BUTTON_TIME": "Time for long-click (ms)",
				"LANG_TWO_BUTTONS_UI": "Two Buttons UI",
				"LANG_TWO_BUTTONS_UI_NAME": "User-interface with two buttons",
				"LANG_TWO_BUTTONS_UI_SELECT": "Next/Select PIN",
				"LANG_TWO_BUTTONS_UI_CANCEL": "Cancel PIN",
				"LANG_TWO_BUTTONS_UI_GENERAL": "General Menu",
				"LANG_TWO_BUTTONS_UI_MENU": "Menu",
				"LANG_TWO_BUTTONS_UI_OPTION": "Option",
				"LANG_TWO_BUTTONS_UI_OPTION_NAME": "Menu option",
				"LANG_TWO_BUTTONS_UI_OPTIONS": "Options",
				"LANG_TWO_BUTTONS_UI_TIME": "Refresh Time [ms]",
				"LANG_TWO_BUTTONS_UI_HIGHLIGHTED": "Highlighted",
				"LANG_TWO_BUTTONS_UI_SELECTED": "Selected",
				"LANG_TWO_BUTTONS_UI_TOOLTIP": "Implements a simple User Interface (UI) with two buttons with menus and options.",
				"LANG_TWO_BUTTONS_UI_MENU_TOOLTIP": "User Interface menu.",
				"LANG_TWO_BUTTONS_UI_OPTION_TOOLTIP": "an option in the two-button user interface.",
				"LANG_BQ_BUTTON_LONG_SHORT_TOOLTIP": "Discriminates how long the button is pressed",
				"LANG_ZUM_BUTTON": "Read pull-up digital input",
				"LANG_ZUM_BUTTON_NAME": "Read digital input (with pull-up resistor)",
				"LANG_ZUM_BUTTON_PIN": "PIN",
				"LANG_ZUM_BUTTON_TOOLTIP": "Reads an input in pull-up mode.",
				"LANG_BQ_JOYSTICK_DIR": "Joystick direction",
				"LANG_BQ_JOYSTICK_PIN_X": "X axis PIN",
				"LANG_BQ_JOYSTICK_PIN_Y": "Y axis PIN",
				"LANG_BQ_JOYSTICK_DIR_NAME": "Joystick direction",
				"LANG_BQ_JOYSTICK_MAG_NAME": "Joystick magnitude",
				"LANG_BQ_JOYSTICK_DIR_TOOLTIP": "Joystick direction (angle)",
				"LANG_BQ_JOYSTICK_MAG_TOOLTIP": "Joystick magnitude (distance to the center)",
				"LANG_BQ_JOYSTICK_MAG": "Joystick magnitude",
				"LANG_RELE": "Relay",
				"LANG_RELE_NAME": "Activates or deactivates a relay",
				"LANG_RELE_PIN": "PIN",
				"LANG_RELE_VALUE": "Value",
				"LANG_RELE_TOOLTIP": "Sets the relay state",
				"LANG_CATEGORY_DISTANCE": "Distance",
				"LANG_CATEGORY_LIGHT": "Light",
				"LANG_CATEGORY_MOVEMENT": "Movement",
				"LANG_CATEGORY_AMBIENT": "Environment",
				"LANG_CATEGORY_WEB_INTERFACE": "Web Interface",
				"LANG_BLUETOOTH_DEF": "Bluetooth definition",
				"LANG_BLUETOOTH_DEF_NAME_NAME": "Sets bluetooth module",
				"LANG_BLUETOOTH_DEF_BAUD_RATE": "Baud rate",
				"LANG_BLUETOOTH_DEF_PIN1": "RX",
				"LANG_BLUETOOTH_DEF_PIN2": "TX",
				"LANG_BLUETOOTH_DEF_PORT": "Port",
				"LANG_BLUETOOTH_DEF_TOOLTIP": "Bluetooth module configuration",
				"LANG_BLUETOOTH_DEF_CONF_NAME": "Set name",
				"LANG_BLUETOOTH_DEF_CONF_NAME_NAME": "Sets bluetooth name",
				"LANG_BLUETOOTH_DEF_NAME": "Name",
				"LANG_BLUETOOTH_NAME_TOOLTIP": "Bluetooth module name setting",
				"LANG_BLUETOOTH_APP": "Bluetooth Receive Command",
				"LANG_BLUETOOTH_APP_NAME": "Receive bluetooth command",
				"LANG_BLUETOOTH_APP_TOOLTIP": "Receive commands through Bluetooth module",
				"LANG_BLUETOOTH_APP_DATA": "Command",
				"LANG_BLUETOOTH_APP_ITEM_LOOP": "Loop?",
				"LANG_BLUETOOTH_PREDEFINED_COMMAND_NAME": "Predefined bluetooth command",
				"LANG_BLUETOOTH_NUM_COMMAND_NAME": "Generic bluetooth command",
				"LANG_BLUETOOTH_BREAKLOOP": "Cancel repeat",
				"LANG_LED_MATRIX_NAME": "Defines a 8x8 LED Matrix",
				"LANG_LED_MATRIX_ANGRY": "Angry",
				"LANG_LED_MATRIX_HAPPY": "Happy",
				"LANG_LED_MATRIX_SAD": "Sad",
				"LANG_LED_MATRIX_HEART": "Love",
				"LANG_LED_MATRIX_STUNNED": "Stunned",
				"LANG_PIEZO_BUZZER_NAME": "Buzzer (Predefined Musical Note)",
				"LANG_PIEZO_BUZZER_NO_TONE_NAME": "Stops buzzer sound",
				"LANG_PIEZO_BUZZER_PREDEF_SOUND_NAME": "Generates predefined sounds",
				"LANG_PIEZO_BUZZER_DO": "C4",
				"LANG_PIEZO_BUZZER_RE": "D4",
				"LANG_PIEZO_BUZZER_MI": "E4",
				"LANG_PIEZO_BUZZER_FA": "F4",
				"LANG_PIEZO_BUZZER_SOL": "G4",
				"LANG_PIEZO_BUZZER_LA": "A4",
				"LANG_PIEZO_BUZZER_SI": "B4",
				"LANG_MOVE_FORWARD": "Forward",
				"LANG_MOVE_BACKWARD": "Backward",
				"LANG_MOVE_RIGHT": "Right",
				"LANG_MOVE_LEFT": "Left",
				"LANG_MOVE_STOP": "Stop",
				"LANG_MOVE_LEFT_ARM_GRIP": "Close left finger",
				"LANG_MOVE_LEFT_ARM_RELEASE": "Open left finger",
				"LANG_MOVE_RIGHT_ARM_GRIP": "Close right finger",
				"LANG_MOVE_RIGHT_ARM_RELEASE": "Open right finger",
				"LANG_MOVE_GRIP": "Close grip",
				"LANG_MOVE_RELEASE": "Open grip",
				"LANG_OBSTACLE": "Avoid obstacles",
				"LANG_LINE_FOLLOWING": "Line Tracker",
				"LANG_BLACK": "Black",
				"LANG_BLACK_NAME": "Black line light value",
				"LANG_WHITE": "White",
				"LANG_WHITE_NAME": "White line light value",
				"LANG_MOVE_LEFT_ARM_UP": "Left hand up",
				"LANG_MOVE_LEFT_ARM_DOWN": "Left hand down",
				"LANG_MOVE_RIGHT_ARM_UP": "Right hand up",
				"LANG_MOVE_RIGHT_ARM_DOWN": "Right hand down",
				"LANG_MOVE_ARMS_UP": "Hands up",
				"LANG_MOVE_ARMS_DOWN": "Hands down",
				"LANG_BLUETOOTH_COMMAND_PREDEF_TOOLTIP": "Receive a predefined command through Bluetooth module",
				"LANG_BLUETOOTH_COMMAND_NUM_TOOLTIP": "Receive a given command through Bluetooth module (byte 0~255)",
				"LANG_BLUETOOTH_RECV_TELEGRAM": "Bluetooth Receive telegram",
				"LANG_BLUETOOTH_RECV_TELEGRAM_NAME": "Receive a bluetooth telegram",
				"LANG_BLUETOOTH_TELEGRAM_RECV_TOOLTIP": "Decode telegrams received through the Bluetooth module",
				"LANG_BLUETOOTH_TELEGRAM": "Telegram",
				"LANG_BLUETOOTH_TELEGRAM_NAME": "Telegram reception (predefined type)",
				"LANG_BLUETOOTH_REQUEST": "Request",
				"LANG_BLUETOOTH_COMMAND": "Command",
				"LANG_BLUETOOTH_RESPONSE": "Response",
				"LANG_BLUETOOTH_DIGITAL_WRITE": "Digital Write",
				"LANG_BLUETOOTH_ANALOG_WRITE": "Analog Write",
				"LANG_BLUETOOTH_SERVO": "Servo",
				"LANG_BLUETOOTH_SERVO360": "Servo 360º",
				"LANG_BLUETOOTH_BUZZER_TONE": "Buzzer Tone",
				"LANG_BLUETOOTH_BUZZER_MELODY" :"Buzzer Melody",
				"LANG_BLUETOOTH_PUSHBUTTON": "Push-button",
				"LANG_BLUETOOTH_DHT": "DHT",
				"LANG_BLUETOOTH_LED_MATRIX": "LED Matrix",
				"LANG_BLUETOOTH_RGB_LED_STRIP": "RGB LED Strip",
				"LANG_BLUETOOTH_BRIGHTNESS": "Brightness",
				"LANG_BLUETOOTH_PREDEFINED": "Predefined",
				"LANG_BLUETOOTH_TELEGRAM_PREDEF_TOOLTIP": "Sends a predefined telegram of the specified type",
				"LANG_BLUETOOTH_TELEGRAM_NUM_TOOLTIP": "Sends a telegram of the specified type (command)",
				"LANG_BLUETOOTH_DECODE_TELEGRAM": "Decode telegram",
				"LANG_BLUETOOTH_PIN": "PIN",
				"LANG_BLUETOOTH_VALUE": "Value",
				"LANG_BLUETOOTH_ANGLE": "Angle",
				"LANG_BLUETOOTH_SPEED": "Speed",
				"LANG_BLUETOOTH_FREQ": "Frequency",
				"LANG_BLUETOOTH_DURATION": "Duration",
				"LANG_BLUETOOTH_PIN_CS": "CS",
				"LANG_BLUETOOTH_PIN_DIN": "DIN",
				"LANG_BLUETOOTH_PIN_CLK": "CLK",
				"LANG_BLUETOOTH_DATA": "Data",
				"LANG_BLUETOOTH_SENSOR": "Sensor",
				"LANG_BLUETOOTH_DISTANCE": "Distance",
				"LANG_BLUETOOTH_TEXT1": "Text",
				"LANG_BLUETOOTH_R": "R",
				"LANG_BLUETOOTH_G": "G",
				"LANG_BLUETOOTH_B": "B",
				"LANG_BLUETOOTH_BOOLEAN_WRITE":"Boolean Write",
				"LANG_BLUETOOTH_BOOLEAN_READ": "Boolean Read",
				"LANG_BLUETOOTH_INTEGER_WRITE": "Integer Write",
				"LANG_BLUETOOTH_INTEGER_READ": "Integer Read",
				"LANG_BLUETOOTH_FLOAT_WRITE": "Float Write",
				"LANG_BLUETOOTH_FLOAT_READ": "Float Read",
				"LANG_BLUETOOTH_TEMPERATURE": "Temperature",
				"LANG_BLUETOOTH_HUMIDITY": "Humidity",
				"LANG_BLUETOOTH_TELEGRAM_DECODE_TOOLTIP": "Decode a telegram (extracts data based on the telegram type)",
				"LANG_BLUETOOTH_DECODE_TELEGRAM_DATA": "Position",
				"LANG_BLUETOOTH_TELEGRAM_DECODE_NUM_TOOLTIP": "Returns data at the given position",
				"LANG_BLUETOOTH_DIGITAL_READ": "Digital Read",
				"LANG_BLUETOOTH_ANALOG_READ": "Analog Read",
				"LANG_BLUETOOTH_SONAR_READ": "Sonar",
				"LANG_BLUETOOTH_TCRT5000_READ": "TCRT5000",
				"LANG_BLUETOOTH_GAS_READ": "Gas",
				"LANG_BLUETOOTH_COLOR_READ": "Colour",
				"LANG_BLUETOOTH_SEND_TELEGRAM": "Bluetooth Send telegram",
				"LANG_BLUETOOTH_TELEGRAM_TYPE": "Telegram",
				"LANG_BLUETOOTH_TELEGRAM_SEND_NAME": "Send a bluetooth telegram",
				"LANG_BLUETOOTH_TELEGRAM_SEND_TOOLTIP": "Code telegrams and send them through the Bluetooth module",
				"LANG_BLUETOOTH_RECEIVE": "Bluetooth receive data",
				"LANG_BLUETOOTH_RECEIVE_NAME": "Receive information through bluetooth",
				"LANG_BLUETOOTH_RECEIVE_TOOLTIP": "Returns the data received by the Bluetooth module",
				"LANG_BLUETOOTH_SEND": "Bluetooth send data",
				"LANG_BLUETOOTH_SEND_SEND": "Send",
				"LANG_BLUETOOTH_SEND_SEND_NAME": "Send bluetooth data",
				"LANG_BLUETOOTH_SEND_TOOLTIP": "Sends the input data using the Bluetooth module",
				"LANG_BLUETOOTH_SERIAL_AVAILABLE": "Bluetooth Serial Available",
				"LANG_BLUETOOTH_SERIAL_AVAILABLE_NAME": "Check bluetooth availability",
				"LANG_BLUETOOTH_SERIAL_AVAILABLE_TOOLTIP": "Execute commands if bluetooth serial has data",
				"LANG_WIFI_ESP8266_DEF": "Define Wifi",
				"LANG_WIFI_ESP8266_NOT_INTEGRATED": "Not Integrated",
				"LANG_WIFI_ESP8266_INTEGRATED": "Integrated",
				"LANG_WIFI_ESP8266_DEF_SSID": "SSID",
				"LANG_WIFI_ESP8266_DEF_PASSWORD": "Password",
				"LANG_WIFI_ESP8266_DEF_HOSTNAME": "Device hostname",
				"LANG_WIFI_ESP8266_DEF_CONSOLE": "Print status?",
				"LANG_WIFI_ESP8266_DEF_BAUD_RATE": "Baud rate",
				"LANG_WIFI_ESP8266_DEF_PIN1": "RX",
				"LANG_WIFI_ESP8266_DEF_PIN2": "TX",
				"LANG_WIFI_ESP8266_DEF_NAME": "WiFi module",
				"LANG_WIFI_ESP8266_DEF_TOOLTIP": "Wifi module configuration (integrated or not integrated)",
				"LANG_WIFI_ESP8266_LOCALIP": "Local IP",
				"LANG_WIFI_ESP8266_LOCALIP_NAME": "Local IP",
				"LANG_WIFI_ESP8266_LOCALIP_TOOLTIP": "Returns the local IP",
				"LANG_WIFI_ESP8266_MAC": "MAC Address",
				"LANG_WIFI_ESP8266_MAC_NAME": "MAC address",
				"LANG_WIFI_ESP8266_MAC_TOOLTIP": "Returns the MAC address",
				"LANG_WIFI_ESP8266_ISCONNECTED": "Is connected?",
				"LANG_WIFI_ESP8266_ISCONNECTED_NAME": "WiFi connected",
				"LANG_WIFI_ESP8266_ISCONNECTED_TOOLTIP": "Returns true if it is connected",
				"LANG_WIFI_ESP8266_TCP_OPEN": "Open (client)",
				"LANG_WIFI_ESP8266_IP": "IP Server",
				"LANG_WIFI_ESP8266_PORT": "Port",
				"LANG_WIFI_ESP8266_HTTP_PORT": "HTTP Port",
				"LANG_WIFI_ESP8266_TCP_OPEN_NAME": "Open TCP/IP connection",
				"LANG_WIFI_ESP8266_TCP_OPEN_TOOLTIP": "Open a TCP/IP connection through the specified port",
				"LANG_WIFI_ESP8266_TCP_CLOSE": "Close (client)",
				"LANG_WIFI_ESP8266_TCP_CLOSE_NAME": "Close TCP/IP connection",
				"LANG_WIFI_ESP8266_TCP_CLOSE_TOOLTIP": "Closes the TCP/IP connection",
				"LANG_WIFI_ESP8266_RECV": "Receive (client)",
				"LANG_WIFI_ESP8266_RECV_NAME": "Receive TCP/IP data",
				"LANG_WIFI_ESP8266_RECV_TOOLTIP": "Receives data from the TCP/IP connection",
				"LANG_WIFI_ESP8266_SEND": "Send (client)",
				"LANG_WIFI_ESP8266_TEXT": "Text",
				"LANG_WIFI_ESP8266_SEND_NAME": "Send TCP/IP data",
				"LANG_WIFI_ESP8266_SEND_TOOLTIP": "Sends data through the TCP/IP connection",
				"LANG_WIFI_ESP8266_HTTP_SERVER": "HTML Web Page",
				"LANG_WIFI_ESP8266_HTML": "HTML",
				"LANG_WIFI_ESP8266_HTTP_SERVER_NAME": "HTML web server",
				"LANG_WIFI_ESP8266_HTTP_SERVER_TOOLTIP": "Creates a web server base on HTTP protocol with ESP8266 module (not integrated)",
				"LANG_WIFI_OTA_SET_DEVICENAME_DEF": "Set Device Hostname",
				"LANG_WIFI_OTA_SET_DEVICENAME_NAME": "Set device hostname",
				"LANG_WIFI_OTA_SET_DEVICENAME_TOOLTIP": "Sets the hostname for your device (you can upload code using its hostname instead of the IP address).",
				"LANG_WIFI_OTA_SET_PASSWORD_DEF": "Set Device Password",
				"LANG_WIFI_OTA_SET_PASSWORD_TOOLTIP": "Sets a password for your device (to prevent someone else to upload code into your device).",
				"LANG_LED_MATRIX": "LED Matrix 8x8",
				"LANG_LED_MATRIX_CS_PIN": "CS",
				"LANG_LED_MATRIX_DIN_PIN": "DIN",
				"LANG_LED_MATRIX_CLK_PIN": "CLK",
				"LANG_LED_MATRIX_VERTICAL": "Vertical",
				"LANG_LED_MATRIX_HORIZONTAL": "Horizontal",
				"LANG_LED_MATRIX_VERTICAL_180": "Vertical 180º",
				"LANG_LED_MATRIX_HORIZONTAL_180": "Horizontal 180º",
				"LANG_LED_MATRIX_PREDEF_NAME": "Predefined expression on 8x8 LED Matrix",
				"LANG_LED_MATRIX_PREDEF_TOOLTIP": "Build an predefined expression for LED Matrix",
				"LANG_LED_MATRIX_GENERIC_TOOLTIP": "Build a generic expression for LED Matrix",
				"LANG_LED_MATRIX_DRAWING_TOOLTIP": "Joins cols/rows for building an expression for LED Matrix.",
				"LANG_LED_MATRIX_DRAWING_STREAM_NAME": "Animated 8x8 LED matrix",
				"LANG_LED_MATRIX_DRAWING_STREAM_TOOLTIP": "Shows a stream of text on the LED Matrix",
				"LANG_LED_MATRIX_STREAM_TOOLTIP": "Text to show as a stream on the LED Matrix",
				"LANG_LED_MATRIX_STREAM_NAME": "Animated text",
				"LANG_LED_MATRIX_DRAWING_SEQUENTIALLY_NAME": "Animated expression",
				"LANG_LED_MATRIX_DRAWING_SEQUENTIALLY_TOOLTIP": "Shows a stream of expressions on the LED Matrix",
				"LANG_LED_MATRIX_DRAWING_SEQUENTIALLY_MUTATOR_TOOLTIP": "LED Matrix stream container",
				"LANG_LED_MATRIX_DRAWING_SEQUENTIALLY_ITEM_TOOLTIP": "An expression",
				"LANG_LED_MATRIX_ROW_TOOLTIP": "Build an row for LED Matrix.",
				"LANG_OLED_EMPTY": "Empty",
				"LANG_LED_MATRIX_DRAWING_NO_CONNECTION": "No connection",
				"LANG_LED_MATRIX_DRAWING_POOR_CONNECTION": "Poor connection",
				"LANG_LED_MATRIX_DRAWING_GOOD_CONNECTION": "Good connection",
				"LANG_LED_MATRIX_DRAWING_EXCELLECT_CONNECTION": "Excellent connection",
				"LANG_LED_MATRIX_DRAWING_NO_BATTERY": "No battery",
				"LANG_LED_MATRIX_DRAWING_LOW_BATTERY": "Low battery",
				"LANG_LED_MATRIX_DRAWING_MEDIUM_BATTERY": "Medium battery",
				"LANG_LED_MATRIX_DRAWING_FULL_BATTERY": "Full battery",
				"LANG_LED_MATRIX_DRAWING_CORRECT": "Correct",
				"LANG_LED_MATRIX_DRAWING_WRONG": "Wrong",
				"LANG_LED_MATRIX_DRAWING_ARROW_UP": "Arrow up",
				"LANG_LED_MATRIX_DRAWING_ARROW_DOWN": "Arrow down",
				"LANG_LED_MATRIX_DRAWING_ARROW_RIGHT": "Arrow right",
				"LANG_LED_MATRIX_DRAWING_ARROW_LEFT": "Arrow left",
				"LANG_LED_MATRIX_DRAWING_TRIANGLE_UP": "Triangle up",
				"LANG_LED_MATRIX_DRAWING_TRIANGLE_DOWN": "Triangle down",
				"LANG_LED_MATRIX_DRAWING_TRIANGLE_RIGHT": "Triangle right",
				"LANG_LED_MATRIX_DRAWING_TRIANGLE_LEFT": "Triangle left",
				"LANG_LED_MATRIX_DRAWING_SMILE": "Smile",
				"LANG_LED_MATRIX_DRAWING_DIAMOND": "Diamond",
				"LANG_LED_MATRIX_DRAWING_CROSS": "Cross",
				"LANG_LED_MATRIX_DRAWING_SPADE": "Spade",
				"LANG_LED_MATRIX_DRAWING_CIRCLE_FULL": "Circle full",
				"LANG_LED_MATRIX_DRAWING_CIRCLE": "Circle",
				"LANG_LED_MATRIX_DRAWING_MALE": "Male",
				"LANG_LED_MATRIX_DRAWING_FEMALE": "Female",
				"LANG_LED_MATRIX_DRAWING_NOTE": "Note",
				"LANG_LED_MATRIX_DRAWING_NOTES": "Notes",
				"LANG_LED_MATRIX_DRAWING_SNOW": "Snow",
				"LANG_LED_MATRIX_DRAWING_ARROW_UP_DOWN": "Arrow up-down",
				"LANG_LED_MATRIX_DRAWING_ARROW_LEFT_RIGHT": "Arrow left-right",
				"LANG_LED_MATRIX_DRAWING_ICONS_NAME": "Image to show on 8x8 LED matrix",
				"LANG_LED_MATRIX_DRAWING_NAME": "Customize 8x8 LED matrix", 
				"LANG_LED_MATRIX_DRAWING_ICONS_TOOLTIP": "Image to show on the LEDs matrix",
				"LANG_CONTROLS_TASK_MS": "Multi-task",
				"LANG_CONTROLS_ALWAYS_DO": "Always do",
				"LANG_CONTROLS_TASKS_NAME": "Executes multiple tasks",
				"LANG_CONTROLS_TASKS_DESCRIPTION": "Defines a set of periodic tasks using the Arduino timer0. All instructions that use timer0 or delays may be affected. It has a stack for instructions that are always executed (every millisecond) and another stacks for tasks that are executed periodically.",
				"LANG_CONTROLS_TASKS_MUTATOR_DESC": "Create new periodic tasks by adding them to the container",
				"LANG_CONTROLS_TASKS_STATEMENT_ALWAYS": "Always do: Set of instructions to execute every millisecond.",
				"LANG_CONTROLS_TASKS_STATEMENT_TASK": "Task: Set of instructions to execute to the specified period.",
				"LANG_CONTROLS_TASKS_TOOLTIP": "Define periodic tasks",
				"LANG_CONTROLS_STATE_MACHINE_TITLE": "State machine",
				"LANG_CONTROLS_STATE_MACHINE_NAME": "State machine",
				"LANG_CONTROLS_STATE_MACHINE_DESCRIPTION": "It allows to define a state machine. You can add initial states (initialized from the beginning) or standard states (not initialized). Both will be activated and deactivated according to their activation and deactivation conditions when running the state machine",
				"LANG_CONTROLS_STATE_MACHINE_MUTATOR_DESCRIPTION": "Adds new states to the state machine. The initial states are active at startup.",
				"LANG_CONTROLS_STATE_MACHINE_STATEMENT_STATE": "State: Set up instructions to execute in case the corresponding state is active.",
				"LANG_CONTROLS_STATE_DROPDOWN_STATE": "State: State to be defined.",
				"LANG_CONTROLS_STATE_MACHINE_TOOLTIP": "Implements a state machine",
				"LANG_CONTROLS_TRANSITION_STATE": "state",
				"LANG_CONTROLS_STATE_MACHINE_STATE_TOOLTIP": "State",
				"LANG_CONTROLS_TRANSITION_AND": "and",
				"LANG_CONTROLS_STATE_MACHINE_STATE_AND_TOOLTIP": "States concatenation",
				"LANG_CONTROLS_TRANSITION_COND": "Transition condition",
				"LANG_CONTROLS_TRANSITION_COND_FROM_TO_NAME": "Transition condition (from ... to ...)",
				"LANG_CONTROLS_TRANSITION_COND_FROM_TO_DESCRIPTION": "Defines a transition between states. An AND convergence can be created if it is combined with the concatenation instruction or OR divergences / convergences if several of these instructions are stacked.",
				"LANG_CONTROLS_TRANSITION_COND_FROM_TO_INPUT_CONDITION": "Condition: Transition condition. If true, the state(s) defined in 'from' will be deactivated.",
				"LANG_CONTROLS_TRANSITION_COND_FROM_TO_INPUT_STATE": "States: State(s) to deactivate in case of transition condition becomes true.",
				"LANG_CONTROLS_TRANSITION_COND_FROM_TO_DROPDOWN_STATE": "State: state to activate.",
				"LANG_CONTROLS_TRANSITION_COND_TO_FROM_NAME": "Transition condition (to ... from ...)",
				"LANG_CONTROLS_TRANSITION_COND_TO_FROM_DESCRIPTION": "Defines a transition between states. An AND divergence can be created if it is combined with the concatenation instruction or OR divergences / convergences can be created if several of these instructions are stacked.",
				"LANG_CONTROLS_TRANSITION_COND_TO_FROM_INPUT_CONDITION": "Condition: Transition condition. If true, the state(s) defined in 'to' will be activated.",
				"LANG_CONTROLS_TRANSITION_COND_TO_FROM_INPUT_STATE": "State: State(s) to be activated in case of transition condition becomes true.",
				"LANG_CONTROLS_TRANSITION_COND_TO_FROM_DROPDOWN_STATE": "State: state to be disable.",
				"LANG_CONTROLS_TRANSITION_TO_STATE": "to",
				"LANG_CONTROLS_STATE_NAME": "State",
				"LANG_CONTROLS_STATE_DESCRIPTION": "Defines a state to be used in a state machine.",
				"LANG_CONTROLS_STATE_CONC_NAME": "State concatenation",
				"LANG_CONTROLS_STATE_CONC_DESCRIPTION": "Generates an AND condition between two states for AND between states and AND divergence transitions.",
				"LANG_CONTROLS_STATE_CONC_INPUT_EXPRESSION": "Logical expression of states: Logical expression of states to concatenate (AND).",
				"LANG_CONTROLS_STATE_CONC_DROPDOWN_STATE": "State: State to concatenate (AND).",
				"LANG_CONTROLS_TRANSITION_FROM_STATE": "from",
				"LANG_CONTROLS_STATE_MACHINE_TRANSITION_TO_TOOLTIP": "Transition from a state to another state (direct) or AND divergence to several states (contatenating them)",
				"LANG_CONTROLS_STATE_MACHINE_TRANSITION_FROM_TOOLTIP": "Transition to a state from another state (direct) or AND convergence (sinchronization) from several states (contatenating them)",
				"LANG_CONTROLS_INTERRUPT": "Interrupt",
				"LANG_CONTROLS_INTERRUPT_PIN": "PIN",
				"LANG_CONTROLS_INTERRUPT_MODE": "Mode",
				"LANG_CONTROLS_INTERRUPT_LOW": "Low",
				"LANG_CONTROLS_INTERRUPT_CHANGE": "Change",
				"LANG_CONTROLS_INTERRUPT_RISING": "Rising edge",
				"LANG_CONTROLS_INTERRUPT_FALLING": "Falling edge",
				"LANG_CONTROLS_DO": "Do",
				"LANG_CONTROLS_ATTACH_INTERRUPT_NAME": "Attach interrupt",
				"LANG_CONTROLS_ATTACH_INTERRUPT_DESCRIPTION": "Manages interrupts of Arduino and ESP processors. Interrupts can be programmed in \"low state\", \"change\", \"rising edge\" or \"falling edge\" mode. The code included within the interrupt is executed with higher priority than main loop code.",
				"LANG_CONTROLS_ATTACH_INTERRUPT_DROPDOWN_PIN": "Pin: Interrupt pin to be used.",
				"LANG_CONTROLS_ATTACH_INTERRUPT_DROPDOWN_MODE": "Mode: Interrupt mode, \"low state\", \"change\", \"rising edge\" or \"falling edge\".",
				"LANG_CONTROLS_ATTACH_INTERRUPT_STATEMENT_DO": "Do: Set of instructions to be executed within the interrupt in case is triggered.",
				"LANG_CONTROLS_ATTACH_INTERRUPT_TOOLTIP": "Attaches the given interrupt",
				"LANG_CONTROLS_WAIT": "Wait until",
				"LANG_CONTROLS_WAIT_NAME": "Wait to meet a condition",
				"LANG_CONTROLS_WAIT_DESCRIPTION": "Wait until a condition between two values ?has been met.",
				"LANG_CONTROLS_WAIT_INPUT_VALUE1": "Value1: Value 1 to be evaluated.",
				"LANG_CONTROLS_WAIT_INPUT_VALUE2": "Value2: Value 2 to be evaluated.",
				"LANG_CONTROLS_VALUE1": "Value1",
				"LANG_CONTROLS_VALUE2": "Value2",
				"LANG_CONTROLS_WAIT_TOOLTIP": "Wait until the condition is true between two inputs.",
				"LANG_CONTROLS_TASK": "task",
				"LANG_CONTROLS_TASK_TOOLTIP": "Define a periodic task",
				"LANG_CONTROLS_TASK_PERIODIC": "Periodic Tasks",
				"LANG_CONTROLS_STATE_MACHINE_INITIAL_STATE": "Initial State",
				"LANG_CONTROLS_STATE_MACHINE_STATE": "State",
				"LANG_CONTROLS_STATE_MACHINE_STATEMACHINE": "State machine",
				"LANG_BLUETOOTH_APP_ITEM": "command",
				"LANG_BLUETOOTH_DO": "do",
				"LANG_BLUETOOTH_COMMAND_TOOLTIP": "Receive a command through Bluetooth module",
				"LANG_BLUETOOTH_RECV": "Decode message",
				"LANG_BLUETOOTH_TELEGRAM_ITEM": "telegram",
				"LANG_BLUETOOTH_TELEGRAM_ITEM_TOOLTIP": "Decode a telegram received through Bluetooth module",
				"LANG_US": "Get Distance",
				"LANG_US_ECHO_PIN": "Echo",
				"LANG_US_TRIGGER_PIN": "Trigger",
				"LANG_US_NAME": "Ultrasound",
				"LANG_US_TOOLTIP": "Returns the distance measured by the ultrasonic sensor.",
				"LANG_LIDAR": "Get Distance",
				"LANG_LIDAR_NAME": "Ultrasound",
				"LANG_LIDAR_TOOLTIP": "Returns the distance measured by the lidar sensor.",
				"LANG_US_DETECT_COLLISION": "Detect collision",
				"LANG_US_DISTANCE": "Distance",
				"LANG_US_COLLISION": "Collision",
				"LANG_US_NOT_COLLISION": "Free",
				"LANG_US_COLLISION_NAME": "Ultrasound collision",
				"LANG_US_COLLISION_TOOLTIP": "Detects collision or free cases based on a distance threshold with the ultrasonic sensor",
				"LANG_US_KEEP": "Keep distance",
				"LANG_US_REF_DISTANCE": "Ref. distance",
				"LANG_LINE_FOLLOWING_GAIN": "Gain %",
				"LANG_US_KEEPDISTANCE_NAME": "Ultrasound keep distance",
				"LANG_US_KEEPDISTANCE_TOOLTIP": "Returns the speed to be applied to the robot in order to keep a distance using the ultrasonic sensor",
				"LANG_US_REGULATE": "Regulates speed",
				"LANG_US_SPEED_NAME": "Ultrasound speed regulation",
				"LANG_US_SPEED_TOOLTIP": "Returns the speed to be applied to the robot in order to keep a speed to follow an object at a given distance using the ultrasonic sensor",
				"LANG_INFRARED": "Infrared Sensor",
				"LANG_INFRARED_ANALOG_NAME": "Infrared Sensor analog read (TCRT5000)",
				"LANG_INFRARED_DIGITAL_NAME": "Infrared Sensor digital read (TCRT5000)",
				"LANG_INFRARED_PIN": "PIN",
				"LANG_INFRARED_ANALOG_TOOLTIP": "Returns the analog value measured by the infrared sensor.",
				"LANG_INFRARED_DIGITAL_TOOLTIP": "Returns the digital value measured by the infrared sensor.",
				"LANG_LINE_FOLLOWING_LIGHT": "Light",
				"LANG_LINE_FOLLOWING_LIGHT_NAME": "Line Tracking with TCRT5000 (Proportional)",
				"LANG_LINE_FOLLOWING_LIGHT_BINARY_NAME": "Line Tracking with TCRT5000 (Binary)",
				"LANG_LINE_FOLLOWING_TOOLTIP": "Returns the turn value to apply to the base to follow a line.",
				"LANG_GRAY": "Gray",
				"LANG_LINE_FOLLOWING_BINARY_TOOLTIP": "Discriminates between three cases to follow a line: black, grey (just in the middle) or white.",
				"LANG_LINE_FOLLOWING_WHITE_TOOLTIP": "Returns the calibrated value of the white colour of a line.",
				"LANG_LINE_FOLLOWING_BLACK_TOOLTIP": "Returns the calibrated value of the black colour of a line.",
				"LANG_LINE_FOLLOWING_WHITE_NAME": "Calibrates white light",
				"LANG_LINE_FOLLOWING_BLACK_NAME": "Calibrates black light",
				"LANG_LINE_FOLLOWING_WHITE": "Calibrate white",
				"LANG_LINE_FOLLOWING_CALIBRATE_WHITE_TOOLTIP": "Calibrates the white colour value of a line.",
				"LANG_LINE_FOLLOWING_BLACK": "Calibrate black",
				"LANG_LINE_FOLLOWING_CALIBRATE_BLACK_TOOLTIP": "Calibrates the black colour value of a line.",
				"LANG_RG_LED": "Red/Green LED",
				"LANG_RG_LED_NAME": "Red/Green LED",
				"LANG_RG_LED_PIN_R": "PIN R",
				"LANG_RG_LED_PIN_G": "PIN G",
				"LANG_RG_LED_VALUE": "State",
				"LANG_RG_LED_OFF": "Off",
				"LANG_RG_LED_RED": "Red",
				"LANG_RG_LED_GREEN": "Green",
				"LANG_RG_LED_TOOLTIP": "Set a two-state Red/Green LED",
				"LANG_RGB_LED": "RGB LED",
				"LANG_RGB_LED_NAME": "RGB LED",
				"LANG_RGB_LED_PIN_R": "PIN R",
				"LANG_RGB_LED_PIN_G": "PIN G",
				"LANG_RGB_LED_PIN_B": "PIN B",
				"LANG_RGB_LED_VALUE": "Colour",
				"LANG_RGB_LED_TOOLTIP": "Set a colour on a RGB LED",
				"LANG_RGB_RAW_SENSOR": "Colour sensor (ms)",
				"LANG_RGB_RAW_SENSOR_NAME": "Read RGB colour sensor TCS3200",
				"LANG_RGB_LED_PIN_S0": "S0",
				"LANG_RGB_LED_PIN_S1": "S1",
				"LANG_RGB_LED_PIN_S2": "S2",
				"LANG_RGB_LED_PIN_S3": "S3",
				"LANG_RGB_LED_PIN_OUT": "OUT",
				"LANG_RGB_RAW_SENSOR_TOOLTIP": "Reads a colour (in ms)",
				"LANG_RGB_SENSOR": "Detect colour",
				"LANG_RGB_SENSOR_NAME": "Detects RGB color with sensor TCS3200",
				"LANG_RGB_SENSOR_TOOLTIP": "Detects a colour",
				"LANG_RGB_CALIB": "Calibrate detection",
				"LANG_RGB_CALIB_MIN": "Min (ms)",
				"LANG_RGB_CALIB_MAX": "Max (ms)",
				"LANG_RGB_CALIB_TOOLTIP": "Calibrates a colour",
				"LANG_RGB_COLOUR_NAME": "RGB colour to detect",
				"LANG_RGB_COLOUR_TOOLTIP": "Colour",
				"LANG_PIEZO_MP3_PLAYER_DEF": "MP3/WAV Player Definition",
				"LANG_PIEZO_MP3_NAME": "MP3 player",
				"LANG_PIEZO_MP3_TOOLTIP": "Defines a DFPlayer device to reproduce MP3/WAV sound files.",
				"LANG_PIEZO_MP3_PLAYER_PLAY": "Play",
				"LANG_PIEZO_MP3_PLAYER_PLAY_NAME": "MP3 play",
				"LANG_PIEZO_MP3_PLAYER_PLAY_TOOLTIP": "Reproduces a sound file with the given number.",
				"LANG_PIEZO_MP3_PLAYER_PLAY_FOLDER": "Play in Folder",
				"LANG_PIEZO_MP3_PLAYER_PLAY_FOLDER_NAME": "MP3 play folder",
				"LANG_PIEZO_MP3_PLAYER_PLAY_FOLDER_TOOLTIP": "Reproduces a sound file with the given folder number and file number",
				"LANG_PIEZO_MP3_PLAYER_ISPLAYING": "Is Playing?",
				"LANG_PIEZO_MP3_PLAYER_ISPLAYING_NAME": "MP3 Playing?",
				"LANG_PIEZO_MP3_PLAYER_ISPLAYING_TOOLTIP": "Returns true if a file is being reproduced",
				"LANG_PIEZO_MP3_PLAYER_VOLUME": "Set Volume",
				"LANG_PIEZO_MP3_PLAYER_VOLUME_NAME": "MP3 volume",
				"LANG_PIEZO_MP3_PLAYER_VOLUME_TOOLTIP": "Sets the volume for the sound files to be reproduced",
				"LANG_PIEZO_MP3_PLAYER_NEXT": "Next",
				"LANG_PIEZO_MP3_PLAYER_NEXT_NAME": "MP3 next",
				"LANG_PIEZO_MP3_PLAYER_NEXT_TOOLTIP": "Reproduces next file",
				"LANG_PIEZO_MP3_PLAYER_PREVIOUS_NAME": "MP3 previous",
				"LANG_PIEZO_MP3_PLAYER_PREVIOUS_TOOLTIP": "Reproduces previous file",
				"LANG_PIEZO_MP3_PLAYER_PAUSE": "Pause",
				"LANG_PIEZO_MP3_PLAYER_PAUSE_NAME": "MP3 pause",
				"LANG_PIEZO_MP3_PLAYER_PAUSE_TOOLTIP": "Pauses current file",
				"LANG_PIEZO_MP3_PLAYER_STOP": "Stop",
				"LANG_PIEZO_MP3_PLAYER_STOP_NAME": "MP3 stop",
				"LANG_PIEZO_MP3_PLAYER_STOP_TOOLTIP": "Pauses current file",
				"LANG_PIEZO_MP3_PLAYER_LOOP_FOLDER": "Loop Folder",
				"LANG_PIEZO_MP3_PLAYER_LOOP_FOLDER_NAME": "MP3 loop folder",
				"LANG_PIEZO_MP3_PLAYER_LOOP_FOLDER_TOOLTIP": "Loops songs over a given folder number",
				"LANG_PIEZO_MP3_PLAYER_RANDOM": "Play random",
				"LANG_PIEZO_MP3_PLAYER_RANDOM_NAME": "MP3 play random",
				"LANG_PIEZO_MP3_PLAYER_RANDOM_TOOLTIP": "Plays random files",
				"LANG_PIEZO_MP3_PLAYER_EQ": "Equalizer",
				"LANG_PIEZO_MP3_PLAYER_EQ_NAME": "MP3 equalizer",
				"LANG_PIEZO_MP3_PLAYER_EQ_TOOLTIP": "Sets equalizer mode",
				"MP3_EQ_NORMAL": "Normal",
				"MP3_EQ_POP": "Pop",
				"MP3_EQ_ROCK": "Rock",
				"MP3_EQ_JAZZ": "Jazz",
				"MP3_EQ_CLASSIC": "Classic",
				"MP3_EQ_BASS": "Bass",
				"LANG_PIEZO_BUZZER": "Buzzer",
				"LANG_PIEZO_BUZZER_PIN": "PIN",
				"LANG_PIEZO_BUZZER_NOTONE": "SILENCE",
				"LANG_PIEZO_BUZZER_DOs": "#C4",
				"LANG_PIEZO_BUZZER_REs": "#D4",
				"LANG_PIEZO_BUZZER_FAs": "#F4",
				"LANG_PIEZO_BUZZER_SOLs": "#G4",
				"LANG_PIEZO_BUZZER_LAs": "A4#",
				"LANG_PIEZO_BUZZER_DOp": "C5",
				"LANG_PIEZO_BUZZER_DOps": "#C5",
				"LANG_PIEZO_BUZZER_REp": "D5",
				"LANG_PIEZO_BUZZER_REps": "#D5",
				"LANG_PIEZO_BUZZER_MIp": "E5",
				"LANG_PIEZO_BUZZER_FAp": "F5",
				"LANG_PIEZO_BUZZER_FAps": "#F5",
				"LANG_PIEZO_BUZZER_SOLp": "G5",
				"LANG_PIEZO_BUZZER_SOLps": "#G5",
				"LANG_PIEZO_BUZZER_LAp": "A5",
				"LANG_PIEZO_BUZZER_LAps": "#A5",
				"LANG_PIEZO_BUZZER_SIp": "B5",
				"LANG_PIEZO_BUZZER_REDONDA": "Whole",
				"LANG_PIEZO_BUZZER_BLANCA": "Half",
				"LANG_PIEZO_BUZZER_NEGRA": "Quarter",
				"LANG_PIEZO_BUZZER_CORCHEA": "8tH",
				"LANG_PIEZO_BUZZER_SEMICORCHEA": "16tH",
				"LANG_PIEZO_BUZZER_FUSA": "32tH",
				"LANG_PIEZO_BUZZER_SEMIFUSA": "64tH",
				"LANG_PIEZO_BUZZER_TIE": "tie",
				"LANG_PIEZO_BUZZER_TOOLTIP": "Piezo Buzzer",
				"LANG_PIEZO_BUZZER_VOICE_TOOLTIP": "Generates a voice with the piezo buzzer (only works on PIN 3)",
				"LANG_PIEZO_BUZZER_VOICE": "Buzzer",
				"LANG_PIEZO_BUZZER_VOICE_NAME": "Buzzer (voice)",
				"LANG_PIEZO_BUZZER_VOICE_DESCRIPTION": "Emits a voice sound with a buzzer. This instruction only works by connecting the buzzer to the Arduino pin 3 to generate a PWM signal. The quality of the buzzer can clearly affect the voice, which can be heard clearly digitized and of low quality.",
				"LANG_PIEZO_BUZZER_VOICE_INPUT_VOICE": "Voice: Pointer to a variable that contains a word.",
				"LANG_PIEZO_BUZZER_PREDEF_VOICE_NAME": "Generate a word (voice)",
				"LANG_PIEZO_BUZZER_PREDEF_VOICE_DESCRIPTION": "Returns a variable with a digitized word to be used in the buzzer voice command.",
				"LANG_PIEZO_BUZZER_PREDEF_VOICE_DROPDOWN_WORD": "Word: Word to be pronounced.",
				"LANG_PIEZO_BUZZER_PREDEF_VOICE_OUTPUT": "Variable with a pointer to the word to be pronounced.",
				"LANG_PIEZO_BUZZER_PREDEF_VOICE_TOOLTIP": "Generates a wave with a word",
				"LANG_MIC": "Mic",
				"LANG_MIC_PIN_AO": "AO",
				"LANG_MIC_NAME": "Microphone",
				"LANG_MIC_TOOLTIP": "Reads the analog value of the mic",
				"LANG_MIC_PIN_DO": "DO",
				"LANG_MIC_DIGITAL_NAME": "Digital microphone",
				"LANG_MIC_DIGITAL_TOOLTIP": "Reads the digital value of the mic (true if the volume is too high)",
				"LANG_PIEZO_BUZZER_MELODY_NAME": "Buzzer melody",
				"LANG_PIEZO_BUZZER_MELODY_TOOLTIP": "Generates a melody (string with frequencies and durations)",
				"LANG_PIEZO_BUZZER_WAIT": "Background task?",
				"LANG_LED_MATRIX_WAIT": "Background task?",
				"LANG_PIEZO_BUZZER_PLAY_MELODY_TOOLTIP": "Plays current melody",
				"LANG_PIEZO_BUZZER_STOP_MELODY_NAME": "Stop melody",
				"LANG_PIEZO_BUZZER_STOP_MELODY_TOOLTIP": "Stops current melody",
				"LANG_PIEZO_BUZZER_ISPLAYING_MELODY_NAME": "Melody playing?",
				"LANG_PIEZO_BUZZER_ISPLAYING_MELODY_TOOLTIP": "Is it playing a melody?",
				"LANG_PIEZO_BUZZER_PREDEF_MELODY_NAME": "Predefined melody",
				"LANG_PIEZO_BUZZER_PREDEF_MELODY_TOOLTIP": "Generates a predefined melody",
				"LANG_MUSIC_NOTE_NAME": "Musical note",
				"LANG_MUSIC_NOTE_TOOLTIP": "Generates a musical note (frequency and duration)",
				"LANG_MUSIC_NOTE_END_NAME": "End of melody",
				"LANG_MUSIC_NOTE_END_TOOLTIP": "End of melody",
				"LANG_SERVO_CONT": "Continuous rotation Servo",
				"LANG_SERVO_CONT_PIN": "PIN",
				"LANG_SERVO_CONT_ROT": "Speed",
				"LANG_SERVO_CONT_TURN_CLOCKWISE": "Turn clockwise",
				"LANG_SERVO_CONT_TURN_COUNTERCLOCKWISE": "Turn counterclockwise",
				"LANG_SERVO_CONT_STOPPED": "Stopped",
				"LANG_SPEED": "Speed %",
				"LANG_SERVO_CONT_NAME": "Move continuous rotation servo",
				"LANG_SERVO_CONT_TOOLTIP": "Generates movements with a continuous rotation servo.",
				"LANG_SERVO_DC_MOTOR_NAME": "Move dc motor",
				"LANG_SERVO_DC_MOTOR_TOOLTIP": "Generates movements with a DC motor",
				"LANG_DC_MOTOR": "DC Motor",
				"LANG_SERVO_CONT_COAST": "Coast",
				"LANG_SERVO_MOVE": "Servo",
				"LANG_SERVO_MOVE_PIN": "PIN",
				"LANG_DEGREES": "Degrees (0~180)",
				"LANG_SERVO_ATTACH": "Attach",
				"LANG_SERVO_DETACH": "Detach",
				"LANG_SERVO_ATTACH_TOOLTIP": "Attach a servo",
				"LANG_SERVO_DETACH_TOOLTIP": "Detach a servo",
				"LANG_SERVO_ATTACH_NAME": "Servo attach",
				"LANG_SERVO_DETACH_NAME": "Servo detach",
				"LANG_SERVO_MOVE_NAME": "Move standard servo",
				"LANG_SERVO_MOVE_TOOLTIP": "Move between 0~180 degrees.",
				"LANG_SERVO_GRIPPER_MOVE_NAME": "Set gripper positions",
				"LANG_SERVO_GRIPPER_MOVE_TOOLTIP": "Sets gripper fingers angles for given positions",
				"LANG_MOVE_BASE": "Move base",
				"LANG_MOVE_BASE_LEFT": "Left",
				"LANG_MOVE_BASE_RIGHT": "Right",
				"LANG_ADVANCE": "Linear (-100~100)",
				"LANG_TURN": "Turn (-100~100)",
				"LANG_MOVE_BASE_NAME": "Move robot base with servo motors",
				"LANG_MOVE_BASE_TOOLTIP": "Send commands to movement servos (left and right) from linear and angular velocities.",
				"LANG_MOVE_FBLR_NAME": "Simple movement of robot base",
				"LANG_MOVE_FBLR_TOOLTIP": "Send simple commands to left and right servos",
				"LANG_MOVE_BASE_CC_NAME": "Move robot base with DC motors",
				"LANG_MOVE_BASE_CC_TOOLTIP": "Send commands to movement DC motors (left and right) from linear and angular velocities.",
				"LANG_MOVE_FBLR_CC_NAME": "Simple movement robot base with DC motors",
				"LANG_MOVE_FBLR_CC_TOOLTIP": "Send simple commands to left and right DC motors",
				"LANG_SERVO_MOVE_GRIPPER": "Gripper",
				"LANG_MOVE_GRIP_NAME": "Gripper",
				"LANG_MOVE_GRIP_TOOLTIP": "Send commands to set fingers open or close",
				"LANG_SERVO_MOVE_SET": "Set",
				"LANG_SERVO_MOVE_VALUE": "Degrees",
				"LANG_SERVO_MOVE_ARMS": "Hands",
				"LANG_MOVE_ARMS_NAME": "Setup robot arms",
				"LANG_SERVO_MOVE_ARMS_NAME": "Sets arm angles for given positions",
				"LANG_SERVO_MOVE_ARMS_TOOLTIP": "Sets arm angles for given positions",
				"LANG_MOVE_ARMS_TOOLTIP": "Send commands to set hands up or down",
				"LANG_TEMP_REQUEST_AND_READ_TEMP": "DS18B20 Temperature sensor",
				"LANG_TEMP_READ_TEMP": "Temperature Sensor",
				"LANG_TEMP_LM35_NAME": "Analog Temperature sensor (LM35 or NTC)",
				"LANG_TEMP_LM35_DESCRIPTION": "Returns the temperature in Celsius degrees of the temperature sensor LM35 or NTC.",
				"LANG_TEMP_LM35_INPUT_PIN": "Pin: Analog pin to which the sensor is connected to.",
				"LANG_TEMP_LM35_OUTPUT": "Temperature returned by the sensor (in Celsius degrees).",
				"LANG_TEMP_LM35_TOOLTIP": "Returns the temperature in Celsius degrees using a LM35 or NTC analog temperature sensor",
				"LANG_TEMP_BUS_PIN": "Bus PIN",
				"LANG_TEMP_READ_TEMP_UNIT": "Units",
				"LANG_TEMP_REQUEST_AND_READ_TEMP_NAME": "18B20 Temperature",
				"LANG_TEMP_REQUEST_AND_READ_TEMP_DESCRIPTION": "Returns the temperature in Celsius or Farenheit degrees with the temperature sensor DS18B20.",
				"LANG_TEMP_DALLAS_REQUIREMENTS": "This instruction requires Dallas Temperature installed on Arduino IDE.",
				"LANG_TEMP_REQUEST_AND_READ_TEMP_INPUT_PIN": "Bus Pin: Pin to which the sensor is connected to.",
				"LANG_TEMP_REQUEST_AND_READ_TEMP_DROPDOWN_UNITS": "Units: Celsius or Farenheit.",
				"LANG_TEMP_REQUEST_AND_READ_TEMP_OUTPUT": "Temperature returned by the sensor.",
				"LANG_TEMP_REQUEST_AND_READ_TEMP_TOOLTIP": "Requests and reads the 18B20 temperature sensor in Celsius or Fahrenheit degrees",
				"LANG_TEMP_RESOLUTION": "Resolution",
				"LANG_TEMP_RESOLUTION_NAME": "18B20 resolution",
				"LANG_TEMP_RESOLUTION_DESCRIPTION": "Sets the resolution of the DS18B20 temperature sensor, with higher resolutions, the reading is more accurate.",
				"LANG_TEMP_RESOLUTION_INPUT_PIN": "Bus Pin: Pin to which the sensor is connected to.",
				"LANG_TEMP_RESOLUTION_DROPDOWN_BITS": "Bits: Sensor resolution bits.",
				"LANG_TEMP_RESOLUTION_TOOLTIP": "Sets the sensor resolution",
				"LANG_TEMP_ALARM": "DS18B20 Temperature Alarm",
				"LANG_TEMP_ALARM_DHT": "Temperature Alarm",
				"LANG_TEMP_ALARM_NAME": "DHT Temperature alarm",
				"LANG_TEMP_ALARM_DESCRIPTION": "Checks the temperature alarm levels of the DHT11/DHT21/DHT22 sensor and, if an alarm is triggered, executes the corresponding code. Alarm levels are automatically set so that they are considered within the comfort temperatures of a room and uses both temperature and humidity to determine the appropriate situation based on .",
				"LANG_TEMP_ALARM_DHT_OUTPUT": "Temperature in Celsius degrees",
				"LANG_TEMP_ALARM_DHT_DROPDOWN_MODEL": "Sensor: Model of the sensor used DHT11/DHT21/DHT22.",
				"LANG_TEMP_ALARM_DHT_INPUT_PIN": "Bus Pin: Pin to which the sensor is connected to.",
				"LANG_TEMP_ALARM_DHT_STATEMENT_HIGH": "High temperature: Set of instructions to be executed in case of reading a temperature higher than the established high-temperature alarm level.",
				"LANG_TEMP_ALARM_DHT_STATEMENT_MEDIUM": "Medium temperature: Set of instructions to be executed in case of reading a temperature below the set high-temperature alarm level and below the low-temperature alarm level.",
				"LANG_TEMP_ALARM_DHT_STATEMENT_LOW": "Low temperature: Set of instructions to be executed in case of reading a temperature below the set low-temperature alarm level.",
				"LANG_TEMP_ALARM_DHT_FIELD_WARN": "Warn just once: Activate this checkbox to execute the code inside each of the cases just once. The code will not be executed again unless it changes from one state to another.",
				"LANG_TEMP_ALARM2_NAME": "DS18B20 Temperature alarm",
				"LANG_TEMP_ALARM2_DESCRIPTION": "Checks the temperature alarm levels of the DS18B20 sensor and, if an alarm is triggered, execute the corresponding code.",
				"LANG_TEMP_ALARM2_INPUT_PIN": "Bus Pin: Pin to which the sensor is connected to.",
				"LANG_TEMP_ALARM2_STATEMENT_HIGH": "High temperature: Set of instructions to be executed in case of reading a temperature higher than the established high-temperature alarm level.",
				"LANG_TEMP_ALARM2_STATEMENT_LOW": "Low temperature: Set of instructions to be executed in case of reading a temperature below the set low-temperature alarm level.",
				"LANG_TEMP_ALARM_TOOLTIP": "Checks a temperature alarm",
				"LANG_TEMP_ALARM_SET": "Set DS18B20",
				"LANG_TEMP_ALARM_HIGH": "High Temperature",
				"LANG_TEMP_ALARM_LOW": "Low Temperature",
				"LANG_TEMP_ONCE": "Warn just once",
				"LANG_HUMID_ONCE": "Warn just once",
				"LANG_TEMP_CELSIUS": "Temperature",
				"LANG_TEMP_ALARM_SET_NAME": "18B20 set temperature alarm",
				"LANG_TEMP_ALARM_SET_DESCRIPTION": "Sets high or low temperature alarm level.",
				"LANG_TEMP_ALARM2_DROPDOWN_TYPE": "Alarm type: Type of alarm to be set to high or low.",
				"LANG_TEMP_ALARM_SET_INPUT_PIN": "Bus Pin: Pin to which the sensor is connected to.",
				"LANG_TEMP_ALARM_SET_INPUT_TEMPERATURE": "Temperature: Alarm temperature value in Celsius degrees.",
				"LANG_TEMP_ALARM_SET_TOOLTIP": "Sets temperature alarm levels",
				"LANG_TEMP_F2C": "Fahrenheit to Celsius",
				"LANG_TEMP_TO_CELSIUS_NAME": "Fahrenheit to Celsius",
				"LANG_TEMP_TO_CELSIUS_TOOLTIP": "Converts temperature into Celsius degrees",
				"LANG_TEMP_C2F": "Celsius to Fahrenheit",
				"LANG_TEMP_TO_FAHRENHEIT_NAME": "Celsius to Fahrenheit",
				"LANG_TEMP_TO_FAHRENHEIT_TOOLTIP": "Converts temperature into Fahrenheit degrees",
				"LANG_HUMID_READ_HUMID": "Humidity sensor",
				"LANG_HUMID_READ_HUMID_DHT_NAME": "Reads humidity sensor DHT11/DHT21/DHT22",
				"LANG_MOIST_READ_MOIST": "Moisture sensor",
				"LANG_MOIST_READ_MOIST_NAME": "Reads moisture sensor",
				"LANG_MOIST_READ_MOIST_TOOLTIP": "Reads values from a moisture sensor",
				"LANG_MOIST_PIN": "PIN",
				"LANG_TEMP_READ_HUMID": "Temperature sensor",
				"LANG_HUMID_PIN": "PIN",
				"LANG_HUMID_READ_HUMID_DHT_TOOLTIP": "Reads DHT11, DHT21, DHT22 humidity sensor in %",
				"LANG_HUMID_ALARM": "Humidity Alarm",
				"LANG_HUMID_ALARM_NAME": "Humidity sensor alarm (DHT11/DHT21/DHT22)",
				"LANG_HUMID_ALARM_TOOLTIP": "Checks an humidity alarm",
				"LANG_HUMID_ALARM_SET": "Set",
				"LANG_HUMID_ALARM_HIGH": "humidity high",
				"LANG_HUMID_ALARM_LOW": "humidity low",
				"LANG_HUMID_PERCENTAGE": "%",
				"LANG_HUMID_ALARM_SET_TOOLTIP": "Sets humidity alarm levels",
				"LANG_TEMP_PIN": "PIN",
				"LANG_TEMP_READ_TEMP_DHT_NAME": "DHT Temperature",
				"LANG_TEMP_READ_TEMP_HTU_NAME": "HTU Temperature",
				"LANG_HUMID_READ_HUMID_HTU_NAME": "HTU Humidity",
				"LANG_TEMP_READ_TEMP_DHT_DESCRIPTION": "Returns the temperature in Celsius degrees of the humidity sensor DHT11 / DHT21 / DHT22.",
				"LANG_TEMP_DHT_REQUIREMENTS": "This instruction requires DHT Adafruit Library and Adafruit Unified Sensor Library installed on Arduino IDE.",
				"LANG_TEMP_READ_TEMP_DHT_TOOLTIP": "Reads the DHT11, DHT21 DHT22 temperature sensor in Celsius degrees",
				"LANG_TEMP_READ_TEMP_HTU_TOOLTIP": "Reads the HTU21D temperature sensor in Celsius degrees",
				"LANG_TEMP_READ_TEMP_DHT_DROPDOWN_MODEL": "Sensor: Model of the sensor used DHT11/DHT21/DHT22.",
				"LANG_TEMP_READ_TEMP_DHT_INPUT_PIN": "Pin: Pin to which the sensor is connected to.",
				"LANG_TEMP_READ_TEMP_DHT_OUTPUT": "Temperature returned by the sensor.",
				"LANG_THERMAL_COMFORT_TOOLTIP": "Determines the thermal comfort based on temperature and humidity readings",
				"LANG_RAINDROP": "Rain sensor",
				"LANG_RAINDROP_PIN": "PIN",
				"LANG_RAINDROP_ANALOG_NAME": "Rain sensor",
				"LANG_RAINDROP_ANALOG_DESCRIPTION": "Returns the value of the rain sensor's analog signal.",
				"LANG_RAINDROP_ANALOG_INPUT_PIN": "Pin: Analog pin to which the sensor is connected to.",
				"LANG_RAINDROP_ANALOG_OUTPUT": "Analog reading (from 0 to 1023).",
				"LANG_RAINDROP_ANALOG_TOOLTIP": "Reads the quantity of water or rain (from 0 to 1023)",
				"LANG_RAINDROP_DIGITAL_NAME": "Digital rain sensor",
				"LANG_RAINDROP_DIGITAL_DESCRIPTION": "Returns the value of the rain sensor digital signal. The sensitivity of the potentiometer must be adjusted to determine if it is raining or not.",
				"LANG_RAINDROP_DIGITAL_INPUT_PIN": "Pin: Digital pin to which the sensor is connected to.",
				"LANG_RAINDROP_DIGITAL_OUTPUT": "True or false depending on whether it rains or not.",
				"LANG_RAINDROP_DIGITAL_TOOPTIP": "Detects water precense or rain",
				"LANG_RAINDROP_LEVEL": "Rain level",
				"LANG_RAINDROP_LEVEL_NAME": "Rain alarm",
				"LANG_RAINDROP_LEVEL_DESCRIPTION": "Discriminates the amount of rain from the rain sensor and executes the corresponding code.",
				"LANG_RAINDROP_LEVEL_INPUT_PIN": "Pin: Analog pin to which the sensor is connected to.",
				"LANG_RAINDROP_LEVEL_STATEMENT_INTENSE_RAIN": "Intense rain: Set of instructions to run in case of rain (intense).",
				"LANG_RAINDROP_LEVEL_STATEMENT_SOFT_RAIN": "Soft rain: Set of instructions to run in case of rain (soft).",
				"LANG_RAINDROP_LEVEL_STATEMENT_NO_RAIN": "Dry: Set of instructions to run in case there is no rain.",
				"LANG_RAINDROP_LEVEL_TOOLTIP": "Checks a raining level",
				"LANG_RAINDROP_LEVEL_SET": "Set",
				"LANG_RAINDROP_LEVEL_RAIN": "rain intense",
				"LANG_RAINDROP_LEVEL_WET": "rain soft",
				"LANG_RAINDROP_VALUE": "Value",
				"LANG_RAINDROP_SET_LEVEL_NAME": "Set rain alarm",
				"LANG_RAINDROP_SET_LEVEL_DESCRIPTION": "Sets a intensity rain level (heavy rain or soft rain). The values ??correspond to the minimum values ??for intense rain or solf rain. ",
				"LANG_RAINDROP_SET_LEVEL_DROPDOWN_TYPE": "Level Type: Type of level to set (intense or soft rain).",
				"LANG_RAINDROP_SET_LEVEL_INPUT_PIN": "Pin: Analog pin to which the sensor is connected to.",
				"LANG_RAINDROP_SET_LEVEL_TOOLTIP": "Sets a raining level",
				"LANG_PRESSURE_READ_PRESSURE_BMP": "Barometric pressure sensor",
				"LANG_PRESSURE_READ_PRESSURE_BMP_NAME": "Atmospheric pressure barometer (BMP180)",
				"LANG_PRESSURE_READ_PRESSURE_BMP_DESCRIPTION": "Returns the atmospheric pressure of the barometric sensor BMP180 in Pascals (the sensor is connected to the I2C bus)",
				"LANG_PRESSURE_BMP_REQUIREMENTS": "This instruction requires BMP085 Adafruit Library installed on Arduino IDE.",
				"LANG_PRESSURE_READ_PRESSURE_BMP_OUTPUT": "Atmospheric pressure in Pascals.",
				"LANG_PRESSURE_READ_ALTITUDE_BMP": "Barometric altimeter sensor",
				"LANG_PRESSURE_READ_ALTITUDE_BMP_NAME": "Estimates altitude with barometer BMP180",
				"LANG_PRESSURE_READ_ALTITUDE_BMP_DESCRIPTION": "Returns an estimate of the altitude with the barometric sensor BMP180 (the sensor is connected to the I2C bus). Requires that we provide atmospheric pressure at sea level (otherwise a value of 101325 pascals is provided).",
				"LANG_PRESSURE_BMP_INPUT_PREASURE": "Pressure: Atmospheric pressure at sea-level in Pascals.",
				"LANG_PRESSURE_READ_ALTITUDE_BMP_OUTPUT": "Altitude estimated by the sensor.",
				"LANG_PRESSURE_READ_PRESSURE_BMP_TOOLTIP": "Reads barometric pressure from BMP180 sensor in Pa",
				"LANG_TEMP_READ_TEMP_BMP_NAME": "BMP180 Temperature",
				"LANG_TEMP_READ_TEMP_BMP_TOOLTIP": "Reads the temperature from BMP180 barometric sensor in Celsius degrees",
				"LANG_ALTITUDE_READ_ALTITUDE_BMP_SEALEVEL_PRESSURE": "Sea-level pressure (Pa)",
				"LANG_ALTITUDE_READ_ALTITUDE_BMP_TOOLTIP": "Estimates altitude. If the sea-level pressure is provided the estimation is more accurate. Otherwise, a pressure of 101325 Pa at sealevel it is assumed.",
				"LANG_GUVA_S12SD": "Radiation sensor",
				"LANG_GUVA_S12SD_NAME": "Radiation sensor reading (GUVA S12SD)",
				"LANG_GUVA_S12SD_DESCRIPTION": "Returns the radiation measured value in mWatts/cm^2 or the UV-index with GUVA S12SD sensor.",
				"LANG_GUVA_S12SD_DROPDOWN_RADIATION": "Radiation: Units in mWatts/cm^2 or in UV-index.",
				"LANG_GUVA_S12SD_INPUT_PIN": "Pin: Analog pin to which the sensor is connected to.",
				"LANG_GUVA_S12SD_OUTPUT": "Radiation level in mWatts/cm^2 or in UV-index.",
				"LANG_GUVA_S12SD_mWcm2": "mW/cm2",
				"LANG_GUVA_S12SD_INDEX": "UV Index",
				"LANG_GUVA_S12SD_PIN": "PIN",
				"LANG_GUVA_S12SD_TOOLTIP": "Reads radiation level from UV sensor GUVA-S12SD",
				"LANG_WIFI_ESP8266_HTML_DOC": "HTML Document",
				"LANG_HTML_DOC_NAME": "HTML document",
				"LANG_WIFI_ESP8266_HTML_DOC_TOOLTIP": "Creates a HTML document",
				"LANG_WIFI_ESP8266_HTML_TAG": "HTML Tag",
				"LANG_HTML_TAG_NAME": "HTML Tag",
				"LANG_WIFI_ESP8266_HTML_ATTRIBUTES": "Attributes",
				"LANG_HTML_TAG_ATTR_NAME": "HTML tag attribute",
				"LANG_WIFI_ESP8266_HTML_TAG_TOOLTIP": "Creates a HTML tag",
				"LANG_WIFI_ESP8266_HTML_ATTRIBUTE_TOOLTIP": "Creates an attribute for a HTML tag",
				"LANG_WIFI_ESP8266_HTML_TEXT_NAME": "HTML text",
				"LANG_WIFI_ESP8266_HTML_TEXT_FORMAT_NAME": "HTML formatted text",
				"LANG_WIFI_ESP8266_HTML_TEXT_TOOLTIP": "Creates a text to include it in an HTML tag",
				"LANG_WIFI_ESP8266_HTML_TEXT_FORMAT_TOOLTIP": "Creates a formatted text to include it in an HTML tag",
				"LANG_WIFI_ESP8266_HTML_ATTRIBUTE": "Attribute",
				"LANG_SUBCATEGORY_INTERRUPTS": "Interrupts",
				"LANG_SUBCATEGORY_STATEMACHINE": "State machine",
				"LANG_SUBCATEGORY_BLUETOOTH": "Bluetooth",
				"LANG_SUBCATEGORY_WIFI": "WiFi",
				"LANG_SUBCATEGORY_HTTP": "HTTP",
				"LANG_SUBCATEGORY_USB": "USB Serial",
				"LANG_SUBCATEGROY_ULTRASOUND": "Ultrasound",
				"LANG_SUBCATEGORY_MAX7219": "LED Matrix 8x8",
				"LANG_SUBCATEGORY_LCD": "LCD 16x2",
				"LANG_SUBCATEGORY_OLED": "OLED 128x32",
				"LANG_SUBCATEGORY_GEOMETRY": "Geometry",
				"LANG_SUBCATEGORY_OLED_IMAGES": "Images/Icons",
				"LANG_SUBCATEGORY_TIME": "Time",
				"LANG_SUBCATEGORY_INFRARED": "Infrared",
				"LANG_SUBCATEGORY_COLOR": "Colour",
				"LANG_SUBCATEGORY_BUZZER": "Buzzer",
				"LANG_SUBCATEGORY_MUSIC": "Music",
				"LANG_SUBCATEGORY_VOICE": "Voice",
				"LANG_SUBCATEGORY_MIC": "Mic",
				"LANG_SUBCATEGORY_MP3": "MP3/WAV",
				"LANG_SUBCATEGORY_MOTORS": "Motors",
				"LANG_SUBCATEGORY_ROBOT": "Robot",
				"LANG_SUBCATEGORY_ROBOTBASE": "Robot base",
				"LANG_SUBCATEGORY_ROBOTACC": "Robot accessories",
				"LANG_SUBCATEGORY_TEMPERATURE": "Temperature",
				"LANG_SUBCATEGORY_HUMIDITY": "Humidity",
				"LANG_SUBCATEGORY_RAIN": "Rain",
				"LANG_SUBCATEGORY_OTHER": "Other",
				"LANG_SUBCATEGORY_MISC": "Miscellaneous",
				"LANG_SUBCATEGORY_BUS": "Bus",
				"LANG_SUBCATEGORY_BUTTON": "Button",
				"LANG_SUBCATEGORY_HTML": "HTML",
				"LANG_SUBCATEGORY_CONTROL": "Flow Control",
				"LANG_SUBCATEGORY_PROGRAMMING": "Programming",
				"LANG_SUBCATEGORY_ANALOG": "Analog",
				"LANG_SUBCATEGORY_DIGITAL": "Digital",
				"LANG_SUBCATEGORY_PWM": "PWM",
				"LANG_SUBCATEGORY_MUSIC_SILENCE": "Silence",
				"LANG_SUBCATEGORY_C3": "Octave below",
				"LANG_SUBCATEGORY_C4": "Octave",
				"LANG_SUBCATEGORY_C5": "Octave above",
				"LANG_SPI_BEGIN": "SPI begin",
				"LANG_SPI_BEGIN_NAME": "Begins a SPI communication",
				"LANG_SPI_END": "SPI end",
				"LANG_SPI_END_NAME": "Ends a SPI communication",
				"LANG_SPI_TRANSFER": "SPI transfer",
				"LANG_SPI_TRANSFER_NAME": "Send data over a SPI communication",
				"LANG_SPI_TRANSFER_RECV_NAME": "Send and receive data over a SPI communication",
				"LANG_SPI_TRANSFER_ONE_BYTE": "1 byte",
				"LANG_SPI_TRANSFER_TWO_BYTES": "2 bytes",
				"LANG_SPI_TRANSFER_BUFFER": "buffer",
				"LANG_SPI_BAUDRATE": "Baudrate",
				"LANG_SPI_INTERRUPT": "SPI used in interrupt",
				"LANG_SPI_BEGIN_TOOLTIP": "Begins a SPI communication.",
				"LANG_SPI_END_TOOLTIP": "Ends a SPI communication allowing other libraries to use the SPI bus.",
				"LANG_SPI_TRANSFER_TOOLTIP": "Sends data through the SPI bus. Received data are not returned.",
				"LANG_SPI_TRANSFER_RECV_TOOLTIP": "Sends data through the SPI bus. Received data are returned.",
				"LANG_SPI_INTERRUPT_TOOLTIP": "Specifies that this SPI communication is going to be used in an interrupt.",
				"LANG_CONTROLS_INTERRUPT_COUNTER": "Counter (interrupt)",
				"LANG_CONTROLS_ATTACH_INTERRUPT_COUNTER_NAME": "Counts interrupt events",
				"LANG_CONTROLS_ATTACH_INTERRUPT_COUNTER_DESCRIPTION": "Counts the number of times a signal has triggered an interrupt. If the interrupt has been triggered since last time, then executes the code inside the instruction. Interrupts can be set in \"low state\", \"change\", \"rising edge\" or \"falling edge\" mode. This instruction is expected to be included in main loop code, while the code implemented for the interrupt is simply increasing a counter.",
				"LANG_CONTROLS_ATTACH_INTERRUPT_COUNTER_STATEMENT_DO": "Do: Set of instructions to be executed within the interrupt in case is triggered.",
				"LANG_CONTROLS_ATTACH_INTERRUPT_COUNTER_TOOLTIP": "Implements a counter of a digital signal in an interrupt.",
				"LANG_CONTROLS_ATTACH_INTERRUPT_COUNTER2_NAME": "Number of interrupt events",
				"LANG_CONTROLS_ATTACH_INTERRUPT_COUNTER2_DESCRIPTION": "Returns the number of times a signal has triggered an interrupt. Interrupts can be set in \"low state\", \"change\", \"rising edge\" or \"falling edge\" mode. This instruction is expected to be included in main loop code, while the code implemented for the interrupt is simply increasing a counter.",
				"LANG_CONTROLS_ATTACH_INTERRUPT_COUNTER2_DROPDOWN_PIN": "Pin: Interrupt pin to be used.",
				"LANG_CONTROLS_ATTACH_INTERRUPT_COUNTER2_DROPDOWN_MODE": "Mode: Interrupt mode, \"low state\", \"change\", \"rising edge\" or \"falling edge\".",
				"LANG_CONTROLS_ATTACH_INTERRUPT_COUNTER2_OUTPUT": "Number of times the interrupt has been triggered.",
				"LANG_CONTROLS_ATTACH_INTERRUPT_COUNTER_TOOLTIP2": "Returns the number of interrupts.",
				"LANG_WIFI_ESP8266_PROJECT_ID": "Project ID",
				"LANG_WIFI_ESP8266_DEVICE_UUID": "Device UUID",
				"LANG_WIFI_ESP8266_API_KEY": "API Key",
				"LANG_WIFI_ESP8266_CERT": "Use certificate?",
				"LANG_WIFI_ESP8266_SENSOR_NAME": "Sensor Name",
				"LANG_WIFI_ESP8266_ACTUATOR_NAME": "Actuator Name",
				"LANG_WIFI_ESP8266_SENSOR_VALUE": "Value",
				"LANG_SUBCATEGORY_IOT": "IoT",
				"LANG_WIFI_IOT_DEVICEHUB_OPEN": "Setup DeviceHub",
				"LANG_WIFI_IOT_DEVICEHUB_OPEN_TOOLTIP": "Opens a DeviceHub session for publishing data with an IOT device",
				"LANG_WIFI_IOT_DEVICEHUB_SEND": "Send DeviceHub",
				"LANG_WIFI_IOT_DEVICEHUB_SEND_TOOLTIP": "Sends sensor data to DeviceHub",
				"LANG_WIFI_IOT_DEVICEHUB_GET": "Get DeviceHub",
				"LANG_WIFI_IOT_DEVICEHUB_GET_TOOLTIP": "Gets data from a DeviceHub actuator",
				"LANG_WIFI_IOT_SETUP_MAIL": "Setup e-mail",
				"LANG_WIFI_IOT_SETUP_MAIL_NAME": "Setup e-mail",
				"LANG_WIFI_IOT_SETUP_MAIL_TOOLTIP": "Setups a GMail e-mail account",
				"LANG_WIFI_IOT_SEND_MAIL": "Send Mail",
				"LANG_WIFI_IOT_SEND_MAIL_LOGIN": "Login",
				"LANG_WIFI_IOT_SEND_MAIL_PASSWORD": "Password",
				"LANG_WIFI_IOT_SEND_MAIL_NAME": "Send e-mail",
				"LANG_WIFI_IOT_SEND_MAIL_TO": "To",
				"LANG_WIFI_IOT_SEND_MAIL_SUBJECT": "Subject",
				"LANG_WIFI_IOT_SEND_MAIL_MESSAGE": "Message",
				"LANG_WIFI_IOT_SEND_MAIL_TOOLTIP": "Sends an email using a GMail account",
				"LANG_WIFI_IOT_GSHEETS_SETUP": "Google Sheets Setup",
				"LANG_WIFI_IOT_GSHEETS_UPDATE": "Google Sheets Update",
				"LANG_WIFI_IOT_GSHEETS_APPEND": "Google Sheets Append Row",
				"LANG_WIFI_IOT_GSHEETS_ID": "Sheet ID",
				"LANG_WIFI_IOT_GSCRIPTS_ID": "Google Script ID",
				"LANG_WIFI_IOT_GSHEETS_ACCESS_TOKEN": "OAuth2 Access Token",
				"LANG_WIFI_IOT_GSHEETS_RANGE": "Range",
				"LANG_WIFI_IOT_GSHEETS_SHEETNAME": "Sheet Name",
				"LANG_WIFI_IOT_GSHEETS_VALUE": "Value",
				"LANG_WIFI_IOT_GSHEETS_VALUES": "Values",
				"LANG_WIFI_IOT_GSHEETS_UPDATE_TOOLTIP": "Updates a Google Sheets range with the given value.",
				"LANG_WIFI_IOT_GSHEETS_APPEND_NAME": "Google Sheets append new value",
				"LANG_WIFI_IOT_GSHEETS_APPEND_TOOLTIP": "Appends a row to a Google Sheets for the given values.",
				"LANG_WIFI_IOT_GSHEETS_SETUP_NAME": "Google Sheet setup",
				"LANG_WIFI_IOT_GSHEETS_SETUP_TOOPTIP": "Setups a Google Sheets connection using Google Scripts.",
				"LANG_SUBCATERGORY_HTML": "HTML",
				"LANG_SUBCATERGORY_ESPUI": "User Interface",
				"LANG_ESPUI_ESPUI_TITLE": "Title",
				"LANG_ESPUI_ESPUI_TITLE_NAME": "Web-based User-Interface (for ESP processors)",
				"LANG_ESPUI_ESPUI_HOTSPOT": "Enable Wifi Hotspot Code",
				"LANG_ESPUI_ESPUI_TOOLTIP": "Creates a web interface on the ESP32/ESP8266",
				"LANG_ESPUI_BUTTON_BUTTON": "Button",
				"LANG_ESPUI_BUTTON_BUTTON_NAME": "Creates a button (web-based user-interface for ESP processors)",
				"LANG_ESPUI_NAME": "name",
				"LANG_ESPUI_COLOR": "Colour",
				"LANG_ESPUI_TEXT": "Text",
				"LANG_ESPUI_BUTTON_TOOLTIP": "A web interface button",
				"LANG_ESPUI_LABEL_LABEL": "Label",
				"LANG_ESPUI_LABEL": "Label",
				"LANG_ESPUI_PRINT_LABEL_NAME": "Modifies label text (web-based user-interface for ESP processors)",
				"LANG_ESPUI_LABEL_LABEL_NAME": "Creates a label (web-based user-interface for ESP processors)",
				"LANG_ESPUI_LABEL_TOOLTIP": "A web interface label you can update from your code",
				"LANG_ESPUI_STATE": "State",
				"LANG_ESPUI_SWITCH_SWITCH": "Switch",
				"LANG_ESPUI_SWITCH_SWITCH_NAME": "Creates a switch (web-based user-interface for ESP processors)",
				"LANG_ESPUI_SWITCH_TOOLTIP": "A web interface switch",
				"LANG_ESPUI_PAD_PAD": "Pad",
				"LANG_ESPUI_PAD_PAD_NAME": "Creates a button pad (web-based user-interface for ESP processors)",
				"LANG_ESPUI_PAD_CENTER": "Center button?",
				"LANG_ESPUI_PAD_TOOLTIP": "A web interface pad",
				"LANG_ESPUI_SLIDER_SLIDER": "Slider",
				"LANG_ESPUI_SLIDER_SLIDER_NAME": "Creates a slider (web-based user-interface for ESP processors)",
				"LANG_ESPUI_SLIDER_TOOLTIP": "A web interface slider",
				"LANG_ESPUI_SLIDER_VALUE": "Slider value",
				"LANG_ESPUI_SLIDER_LABEL_NAME": "Returns the value of a slider (web interface for ESP processors)",
				"LANG_ESPUI_SLIDER_VALUE_TOOLTIP": "Returns the current value of the slider (between 0 and 100).",
				"LANG_SUBCATERGORY_WS2812": "RGB LEDs",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP": "RGB LEDs strip",
				"LANG_SIMPLEEXPRESSIONS_EXPRESSION": "Expression",
				"LANG_SIMPLEEXPRESSIONS_PIXEL": "Pixel",
				"LANG_SIMPLEEXPRESSIONS_COLOR": "Color",
				"LANG_SIMPLEEXPRESSIONS_HUE": "Color",
				"LANG_SIMPLEEXPRESSIONS_INITIAL_HUE": "From Hue",
				"LANG_SIMPLEEXPRESSIONS_FINAL_HUE": "To Hue",
				"LANG_SIMPLEEXPRESSIONS_ALL_PIXELS": "All",
				"LANG_SIMPLEEXPRESSIONS_PIXELS": "Pixels",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_NAME": "Set LEDs strip",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_TOOLTIP": "Sets data for a LEDs strip pixel for individual or all pixels",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_HUE_NAME": "Set LEDs strip hue",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_HUE_TOOLTIP": "Sets color hue on a LEDs strip for individual or all pixels. It can be used to generate random colors between 0 and 65535.",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_GRADIENT_NAME": "Set LEDs strip gradient of colors",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_GRADIENT_TOOLTIP": "Sets a gradient of colors based on an initial and final hue. It automatically detects if the gradient must be ascent or descent depending on the values used.",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP2_NAME": "Set LED strip (all pixels)",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP2_TOOLTIP": "Sets data for all pixels in a LED strip",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_ALL_PIXELS_NAME": "Set all LEDs strip pixels",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_ALL_PIXELS_TOOLTIP": "Used to indicate to set all pixels in a LEDs strip",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_GENERIC_NAME": "Sets a 7-RGB LEDs strip",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_GENERIC_TOOLTIP": "Sets a 7-RGB LEDs strip",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_PREDEFINED_NAME": "Predefined expression for a 7-RGB LEDs strip",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_PREDEFINED_TOOLTIP": "Provides pre-defined expressions for a 7-RGB LEDs strip",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_CUSTOMIZED_NAME": "Customized expression for a 7-RGB LEDs strip",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_CUSTOMIZED_TOOLTIP": "Provides customized expressions for a 7-RGB LEDs strip",
				"LANG_LED_STRIP_SEQUENTIALLY_NAME": "Customized sequence of expressions",
				"LANG_LED_STRIP_SEQUENTIALLY_TOOLTIP": "A set of customized expressions for a 7-RGB LEDs strip",
				"LANG_LED_STRIP_SEQUENTIALLY_MUTATOR_TOOLTIP": "Container ofr customized expressions for a 7-RGB LEDs strip",
				"LANG_LED_STRIP_SEQUENTIALLY_ITEM_TOOLTIP": "A customized expression for a 7-RGB LEDs strip",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_BRIGHTNESS": "Set Brightness",
				"LANG_SIMPLEEXPRESSIONS_BRIGHTNESS": "Brightness",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_BRIGHTNESS_NAME": "Set LEDs strip brightness",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_BRIGHTNESS_TOOLTIP": "Sets the LEDs brightness",
				"LANG_SIMPLEEXPRESSIONS_SHOW_MOUTH": "7-RGB LEDs",
				"LANG_SIMPLEEXPRESSIONS_PIN": "PIN",
				"LANG_SIMPLEEXPRESSIONS_SHOWMOUTH_TOOLTIP": "Draw an expression on the WS2812 led strip (ring-7)",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_STREAM_NAME": "Animated 7-RGB LEDs strip",
				"LANG_SIMPLEEXPRESSIONS_LED_STRIP_STREAM_TOOLTIP": "Draws a set of expressions on the WS2812 led strip (ring-7)",
				"LANG_SIMPLEEXPRESSIONS_DELAY_WAIT": "Wait (ms)",
				"LANG_SIMPLEEXPRESSIONS_WAIT": "Background task?",
				"LANG_PIEZO_BUZZER_PREDEF_SOUNDS_TOOLTIP": "Plays some basic sounds based on SimpleExpressions library",
				"LANG_PIEZZO_BUZZER_PREDEF_CONNECTION": "Connection",
				"LANG_PIEZZO_BUZZER_PREDEF_DISCONNECTION": "Disconnection",
				"LANG_PIEZZO_BUZZER_PREDEF_BUTTON_PUSHED": "Button pushed",
				"LANG_PIEZZO_BUZZER_PREDEF_MODE1": "Mode 1",
				"LANG_PIEZZO_BUZZER_PREDEF_MODE2": "Mode 2",
				"LANG_PIEZZO_BUZZER_PREDEF_MODE3": "Mode 3",
				"LANG_PIEZZO_BUZZER_PREDEF_SURPRISE": "Surprise",
				"LANG_PIEZZO_BUZZER_PREDEF_OHOOH": "Ohooh",
				"LANG_PIEZZO_BUZZER_PREDEF_OHOOH2": "Ohooh 2",
				"LANG_PIEZZO_BUZZER_PREDEF_CUDDLY": "Cuddly",
				"LANG_PIEZZO_BUZZER_PREDEF_SLEEPING": "Sleeping",
				"LANG_PIEZZO_BUZZER_PREDEF_HAPPY": "Happy",
				"LANG_PIEZZO_BUZZER_PREDEF_SUPER_HAPPY": "Super Happy",
				"LANG_PIEZZO_BUZZER_PREDEF_HAPPY_SHORT": "Happy (short)",
				"LANG_PIEZZO_BUZZER_PREDEF_SAD": "Sad",
				"LANG_PIEZZO_BUZZER_PREDEF_CONFUSED": "Confused",
				"LANG_PIEZZO_BUZZER_PREDEF_FART1": "Fart 1",
				"LANG_PIEZZO_BUZZER_PREDEF_FART2": "Fart 2",
				"LANG_PIEZZO_BUZZER_PREDEF_FART3": "Fart 3",
				"LANG_PIEZZO_BUZZER_PREDEF_PIRATES": "Pirates",
				"LANG_PIEZZO_BUZZER_PREDEF_SPEED": "Speed [0~100%]",
				"LANG_PIEZZO_BUZZER_PREDEF_SHOTS": "# Shots",
				"LANG_PIEZZO_BUZZER_PREDEF_TONES": "# Tones",
				"LANG_PIEZZO_BUZZER_PREDEF_TONE": "Generic Tone",
				"LANG_PIEZZO_BUZZER_PREDEF_SPACEGUN": "Space Gun",
				"LANG_PIEZZO_BUZZER_PREDEF_RANDOM": "Random",
				"LANG_PIEZZO_BUZZER_PREDEF_FIBONACCI": "Fibonacci",
				"LANG_PIEZZO_BUZZER_PREDEF_INCREASING": "Increasing",
				"LANG_PIEZZO_BUZZER_PREDEF_DECREASING": "Decreasing",
				"LANG_PIEZZO_BUZZER_PREDEF_LINEAR": "Linearly",
				"LANG_PIEZZO_BUZZER_PREDEF_EXP": "Exponentially",
				"LANG_PIEZZO_BUZZER_PREDEF_SIREN": "Siren",
				"LANG_PIEZZO_BUZZER_PREDEF_INITIAL": "Initial [Hz]",
				"LANG_PIEZZO_BUZZER_PREDEF_FINAL": "Final [Hz]",
				"LANG_PIEZZO_BUZZER_PREDEF_MAX": "Maximum [Hz]",
				"LANG_PIEZZO_BUZZER_PREDEF_DISTANCE": "Half-tone distance",
				"LANG_PIEZO_BUZZER_PREDEF_SOUNDS2_TOOLTIP": "Generates advances sound effects",
				"LANG_SUBCATEGORY_WALK": "Robot walk",
				"LANG_MOVEMENT_LARS_ROBOT": "Define robot",
				"LANG_MOVEMENT_LARS_FRH": "Hip 1",
				"LANG_MOVEMENT_LARS_BRH": "Hip 2",
				"LANG_MOVEMENT_LARS_BLH": "Hip 3",
				"LANG_MOVEMENT_LARS_FLH": "Hip 4",
				"LANG_MOVEMENT_LARS_FRL": "Leg 1",
				"LANG_MOVEMENT_LARS_BRL": "Leg 2",
				"LANG_MOVEMENT_LARS_BLL": "Leg 3",
				"LANG_MOVEMENT_LARS_FLL": "Leg 4",
				"LANG_LARS_INIT_TOOLTIP": "Defines the servo pins for a quadruped robot.",
				"LANG_LARS_MOVEMENT": "Move robot",
				"LANG_LARS_MOVEMENT_MOVEMENT": "Movement",
				"LANG_LARS_MOVEMENT_HOME": "Home",
				"LANG_LARS_MOVEMENT_WALK": "Walk",
				"LANG_LARS_MOVEMENT_OMNIWALK": "Omni walk",
				"LANG_LARS_MOVEMENT_TURN_LEFT": "Turn left",
				"LANG_LARS_MOVEMENT_TURN_RIGHT": "Turn right",
				"LANG_LARS_MOVEMENT_MOONWALK": "Moonwalk",
				"LANG_LARS_MOVEMENT_DANCE": "Dance",
				"LANG_LARS_MOVEMENT_UPDOWN": "Up-down",
				"LANG_LARS_MOVEMENT_PUSHUP": "Push-up",
				"LANG_LARS_MOVEMENT_HELLO": "Hello",
				"LANG_LARS_MOVEMENT_WAVE": "Wave",
				"LANG_LARS_MOVEMENT_LEG_NUMBER": "Leg number",
				"LANG_LARS_MOVEMENT_STEPS": "Steps",
				"LANG_LARS_MOVEMENT_PERIOD": "Period",
				"LANG_LARS_MOVEMENT_DIR": "Direction",
				"LANG_LARS_MOVEMENT_SIDE": "Side",
				"LANG_LARS_MOVEMENT_TURN_FACTOR": "Turn factor",
				"LANG_LARS_MOVEMENT_FORWARD": "Forward",
				"LANG_LARS_MOVEMENT_BACKWARD": "Backward",
				"LANG_LARS_MOVEMENT_YES": "Yes",
				"LANG_LARS_MOVEMENT_NO": "No",
				"LANG_LARS_MOVEMENT_TOOLTIP": "Generates movement primitives for a quadruped robot",
				"LANG_MOVEMENT_HIPPIE_ROBOT": "Define walking robot",
				"LANG_MOVEMENT_HIPPIE_YR": "  Leg 1",
				"LANG_MOVEMENT_HIPPIE_YL": "  Leg 2",
				"LANG_MOVEMENT_HIPPIE_RR": "Ankle 1",
				"LANG_MOVEMENT_HIPPIE_RL": "Ankle 2",
				"LANG_MOVEMENT_HIPPIE_OFFSET": "Settings",
				"LANG_HIPPIE_INIT_NAME": "Setup walking robot",
				"LANG_HIPPIE_INIT_TOOLTIP": "Defines the servo pins for a biped robot.",
				"LANG_HIPPIE_MOVEMENT_HOME": "Home",
				"LANG_HIPPIE_MOVEMENT_DROOP": "Droop",
				"LANG_HIPPIE_MOVEMENT_WALK": "Walk",
				"LANG_HIPPIE_MOVEMENT_TURN": "Turn",
				"LANG_HIPPIE_MOVEMENT_BEND": "Bend",
				"LANG_HIPPIE_MOVEMENT_SHAKE_LEG": "Shake leg",
				"LANG_HIPPIE_MOVEMENT_UPDOWN": "Up-down",
				"LANG_HIPPIE_MOVEMENT_SWING": "Swing",
				"LANG_HIPPIE_MOVEMENT_TIPTOE_SWING": "Tip-toe swing",
				"LANG_HIPPIE_MOVEMENT_JITTER": "Jitter",
				"LANG_HIPPIE_MOVEMENT_EXCITED": "Excited",
				"LANG_HIPPIE_MOVEMENT_MOONWALKER": "Moonwalker",
				"LANG_HIPPIE_MOVEMENT_CRUSAITO": "Crusaito",
				"LANG_HIPPIE_MOVEMENT_FLAPPING": "Flapping",
				"LANG_HIPPIE_MOVEMENT_MOVEMENT": "Movement",
				"LANG_HIPPIE_MOVEMENT": "Move walking robot",
				"LANG_HIPPIE_MOVEMENT_NAME": "Walking robot movement",
				"LANG_HIPPIE_MOVEMENT_TOOLTIP": "Generates movement primitives for a biped robot",
				"LANG_HIPPIE_ADV_MOVEMENT_NAME": "Walking robot advanced movement",
				"LANG_HIPPIE_ADV_MOVEMENT_TOOLTIP": "Generates advanced movement for a biped robot",
				"LANG_HIPPIE_MOVEMENT_STEPS": "Steps",
				"LANG_HIPPIE_MOVEMENT_SPEED": "Speed",
				"LANG_HIPPIE_MOVEMENT_DIR": "Direction",
				"LANG_HIPPIE_MOVEMENT_CONF": "Conf. angle",
				"LANG_HIPPIE_MOVEMENT_FORWARD": "forward",
				"LANG_HIPPIE_MOVEMENT_BACKWARD": "backward",
				"LANG_HIPPIE_MOVEMENT_LEFT": "left",
				"LANG_HIPPIE_MOVEMENT_RIGHT": "right",
				"LANG_ESPUI_LABEL_PRINT_TOOLTIP": "Sets the text of a web interface label",
				"LANG_STEPPER": "Stepper Motor",
				"LANG_STEPPER_SET_SPEED": "Set Speed",
				"LANG_STEPPER_STEPS": "Steps",
				"LANG_STEPPER_TOTAL_STEPS": "Total steps",
				"LANG_STEPPER_PIN1": "IN1",
				"LANG_STEPPER_PIN2": "IN2",
				"LANG_STEPPER_PIN3": "IN3",
				"LANG_STEPPER_PIN4": "IN4",
				"LANG_STEPPER_PIN5": "IN1",
				"LANG_STEPPER_PIN6": "IN2",
				"LANG_STEPPER_PIN7": "IN3",
				"LANG_STEPPER_PIN8": "IN4",
				"LANG_STEPPER_RPM": "RPM",
				"LANG_STEPPER_SET_SPEED_NAME": "Set stepper motor speed",
				"LANG_STEPPER_SET_SPEED_TOOLTIP": "Sets the speed of a Stepper motor at which it will turn when generating steps",
				"LANG_STEPPER_STEPS_NAME": "Move stepper motor",
				"LANG_STEPPER_STEPS_TOOLTIP": "Moves the motor the given number of steps",
				"LANG_STEPPER_WHEEL_DIA": "Wheel diameter",
				"LANG_STEPPER_DISTANCE": "Distance",
				"LANG_STEPPER_ANGLE": "Angle",
				"LANG_MOVE_FBLR_STEPPER_NAME": "Move robot base with stepper motors",
				"LANG_MOVE_FBLR_STEPPER_TOOLTIP": "Moves a robot base actuated with stepper motors",
				"LANG_RGB_CLASSIFY": "Colour classifier",
				"LANG_RGB_CLASSIFY_NAME": "Classify colour using TCS3200 sensor",
				"LANG_RGB_CLASSIFY_TOOLTIP": "Execute block instructions for corresponding colour",
				"LANG_RGB_CLASSIFY_COLOR": "Colour",
				"LANG_RGB_CLASSIFY_DO" : "do",
				"LANG_RGB_CLASSIFY_STACK": "Classifier",
				"LANG_RGB_CLASSIFY_STACK_TOOLTIP": "Append colours to classify",
				"LANG_RGB_CLASSIFY_COLOR_TOOLTIP": "Colour to classify",
				"LANG_SUBCATEGORY_GAS": "Gas",
				"LANG_GAS_PIN": "PIN",
				"LANG_GAS_ANALOG_READ": "Read Gas",
				"LANG_GAS_ANALOG_READ_NAME": "Gas sensor (analog read)",
				"LANG_GAS_DIGITAL_READ": "Read Gas",
				"LANG_GAS_DIGITAL_READ_NAME": "Gas sensor (digital read)",
				"LANG_GAS_ANALOG_READ_TOOLTIP": "Reads the analog output of a gas sensor",
				"LANG_GAS_DIGITAL_READ_TOOLTIP": "Reads the digital output of a gas sensor",
				"LANG_GAS_CALIBRATE": "Calibrate R0",
				"LANG_GAS_CALIBRATE_NAME": "Gas sensor calibrate R0",
				"LANG_GAS_CALIBRATE_TOOLTIP": "Calibrates the gas sensor by computing the R0 value",
				"LANG_GAS_R0": "R0",
				"LANG_GAS_READ_CALIBRATED": "Read Gas (ppm)",
				"LANG_GAS_READ_CALIBRATED_NAME": "Read gas concentration (calibrated)",
				"LANG_GAS_READ_CALIBRATED_TOOLTIP": "Reads the calibrated gas sensor measurement (in ppm)",
				"LANG_GAS_SENSOR": "Sensor",
				"LANG_GAS_TYPE": "Gas",
				"LANG_GAS_H2": "Hydrogen",
				"LANG_GAS_LPG": "LPG",
				"LANG_GAS_CH4": "Methane",
				"LANG_GAS_CO": "Carbon monoxide",
				"LANG_GAS_ALCOHOL": "Alcohol",
				"LANG_GAS_SMOKE": "Smoke",
				"LANG_GAS_PROPANE": "Propane",
				"LANG_GAS_BENZINE": "Benzine",
				"LANG_GAS_HEXANE": "Hexane",
				"LANG_GAS_CO2": "Carbon dioxide",
				"LANG_GAS_NH4": "Ammonium",
				"LANG_GAS_NH3": "Ammonia",
				"LANG_GAS_BENZENE": "Benzene",
				"LANG_GAS_NOx": "Nitrogen oxides",
				"LANG_MOVE_BASE_SET_POSITION": "Set Position",
				"LANG_MOVE_BASE_WHEEL_COUNTS": "Counts/Turn",
				"LANG_MOVE_BASE_WHEEL_DIA": "Wheel diameter",
				"LANG_MOVE_BASE_WHEEL_SEP": "Wheel separation",
				"LANG_MOVE_BASE_LEFT_ENCODER": "Left encoder",
				"LANG_MOVE_BASE_RIGHT_ENCODER": "Right encoder",
				"LANG_MOVE_BASE_POSITION_X": "Position x",
				"LANG_MOVE_BASE_POSITION_Y": "Position y",
				"LANG_MOVE_BASE_ORIENTATION": "Orientation",
				"LANG_MOVE_BASE_PATH_LENGTH": "Path length",
				"LANG_MOVE_BASE_PATH_LENGTH_NAME": "Path length",
				"LANG_MOVE_BASE_PATH_LENGTH_TOOLTIP": "Gets the path length in cm.",
				"LANG_MOVE_BASE_SET_POSITION_NAME": "Set robot position",
				"LANG_MOVE_BASE_SET_POSITION_TOOLTIP": "This instruction sets the position of the robot to the given values.",
				"LANG_MOVE_BASE_SET_ENCODERS": "Setup Encoders",
				"LANG_MOVE_BASE_SET_ENCODERS_NAME": "Setup encoders",
				"LANG_MOVE_BASE_SET_ENCODERS_TOOLTIP": "This instruction sets the encoder system connected to the interrupts.The robot position will be updated automatically based on encoders interrupts.",
				"LANG_MOVE_BASE_POSITION_X_NAME": "Get robot X position",
				"LANG_MOVE_BASE_POSITION_Y_NAME": "Get robot Y position",
				"LANG_MOVE_BASE_POSITION_ORIENTATION_NAME": "Get robot orientation",
				"LANG_MOVE_BASE_POSITION_X_TOOLTIP": "This instruction returns the X position of the robot in cm.",
				"LANG_MOVE_BASE_POSITION_Y_TOOLTIP": "This instruction returns the Y position of the robot in cm.",
				"LANG_MOVE_BASE_POSITION_ORIENTATION_TOOLTIP": "This instruction returns the orientation of the robot in degrees.",
				"LANG_MOVE_BASE_VELOCITY": "Wheel Velocity",
				"LANG_MOVE_BASE_VELOCITY_LEFT": "Left",
				"LANG_MOVE_BASE_VELOCITY_RIGHT": "Right",
				"LANG_MOVE_BASE_VELOCITY_NAME": "Get wheel velocity",
				"LANG_MOVE_BASE_VELOCITY_TOOLTIP": "Gets the wheel's velocity in RPM.",
				"LANG_CATEGORY_SYSTEM": "System",
				"LANG_SUBCATEGORY_SYSTEM_CONTROL": "Controller",
				"LANG_SYSTEM_CONTROL_PID_CONTROLLER": "PID Controller",
				"LANG_SYSTEM_CONTROL_PID_CONTROLLER_NAME": "PID Controller",
				"LANG_SYSTEM_CONTROL_PID_NAME": "Name",
				"LANG_SYSTEM_CONTROL_PID_SETPOINT": "SetPoint",
				"LANG_SYSTEM_CONTROL_PID_INPUT": "Input",
				"LANG_SYSTEM_CONTROL_PID_SAMPLING_TIME": "Ts",
				"LANG_SYSTEM_CONTROL_PID_GAINS": "Gains",
				"LANG_SYSTEM_CONTROL_PID_CONTROLLER_TOOLTIP": "This instruction implements a PID controller. First computes the error between the reference and the signal, then it computes and output proportional to the error, its integral and its derivative.",
				"LANG_SYSTEM_CONTROL_ONOFF": "ON/OFF Controller",
				"LANG_SYSTEM_CONTROL_ONOFF_NAME": "Name",
				"LANG_SYSTEM_CONTROL_ONOFF_INPUT": "Input",
				"LANG_SYSTEM_CONTROL_ONOFF_HYSTHERESIS": "Hystheresis",
				"LANG_SYSTEM_CONTROL_ONOFF_ON": "On",
				"LANG_SYSTEM_CONTROL_ONOFF_OFF": "Off",
				"LANG_SYSTEM_CONTROL_ONOFF_CONTROLLER_TOOLTIP": "This instruction implements an On/Off controller. This controller include a hysteresis so that the On and Off cases are only executed if the value of the input is above or below the indicated thresholds, respectively.",
				"LANG_SUBCATEGORY_SYSTEM_FILTER": "Filtering",
				"LANG_SYSTEM_CONTROL_FILTER_LOWPASS": "Low-pass filter",
				"LANG_SYSTEM_CONTROL_FILTER_LOWPASS_NAME": "Low-pass filter",
				"LANG_SYSTEM_CONTROL_FILTER_NAME": "Name",
				"LANG_SYSTEM_CONTROL_FILTER_INPUT": "Input",
				"LANG_SYSTEM_CONTROL_FILTER_WEIGHT": "Cut-off Freq.",
				"LANG_SYSTEM_CONTROL_FILTER_LOWPASS_TOOLTIP": "Implements a low-pass filter (exponential moving average). The weight represents the fraction of the input signal to be considered.",
				"LANG_SYSTEM_CONTROL_FILTER_HIGHPASS": "High-pass filter",
				"LANG_SYSTEM_CONTROL_FILTER_HIGHPASS_NAME": "High-pass filter",
				"LANG_SYSTEM_CONTROL_FILTER_HIGHPASS_TOOLTIP": "Implements a high-pass filter (exponential moving average). The weight represents the fraction of the input signal to be rejected.",
				"LANG_SYSTEM_CONTROL_FILTER_BANDPASS": "Band-pass filter",
				"LANG_SYSTEM_CONTROL_FILTER_BANDPASS_NAME": "Band-pass filter",
				"LANG_SYSTEM_CONTROL_FILTER_BANDPASS_TOOLTIP": "Implements a band-pass filter (exponential moving average). The weights represents the fractions of the range of the input signal to pass.",
				"LANG_SYSTEM_CONTROL_FILTER_WEIGHT_LOW": "Low",
				"LANG_SYSTEM_CONTROL_FILTER_WEIGHT_HIGH": "High",
				"LANG_SYSTEM_CONTROL_FILTER_BANDSTOP": "Band-stop filter",
				"LANG_SYSTEM_CONTROL_FILTER_BANDSTOP_NAME": "Band-pass filter",
				"LANG_SYSTEM_CONTROL_FILTER_BANDSTOP_TOOLTIP": "Implements a band-stop filter (exponential moving average). The weights represents the fractions of the range of the input signal to be reject.",
				"LANG_SERVO_MOVE_ATTACK_DEFEND": "Arms swipe",
				"LANG_SERVO_MOVE_ATTACK_DEFEND_SWORD": "Left",
				"LANG_SERVO_MOVE_ATTACK_DEFEND_SHIELD": "Right",
				"LANG_SERVO_MOVE_ATTACK_DEFEND_FROM": "From",
				"LANG_SERVO_MOVE_ATTACK_DEFEND_TO": "to",
				"LANG_SERVO_MOVE_ATTACK_DEFEND_TIME": "Time [ms]",
				"LANG_SERVO_MOVE_ATTACK_DEFEND_NAME": "Arms swipe",
				"LANG_SERVO_MOVE_ATTACK_DEFEND_TOOLTIP": "This instruction generates servo movement for an arms swipe. It moves the servo from the 'from' position to the 'to' position and then moves backwards to the 'from' position in a given amount of time.",
				"LANG_MOVE_BASE_ATTACH": "Detach afterwards?",
				"LANG_MOVE_BASE_TIME": "Time [ms]",
				"LANG_LED_MATRIX_DRAGONBALL": "Dragonball",
				"LANG_LED_MATRIX_TURTLE_SCHOOL": "Turtle school",
				"LANG_LED_MATRIX_BAT": "Bat",
				"LANG_LED_MATRIX_MASK": "BatMask",
				"LANG_LED_MATRIX_DEATH_STAR": "Death Star",
				"LANG_LED_MATRIX_LIGHT_SABER": "Light Saber",
				"LANG_LED_MATRIX_WONDER_WOMAN": "Wonder Woman",
				"LANG_LED_MATRIX_STAR": "Star",
				"LANG_LED_MATRIX_CREEPER": "Creeper",
				"LANG_LED_MATRIX_SWORD": "Sword",
				"LANG_LED_MATRIX_MINION_EYE": "Minion Eye",
				"LANG_LED_MATRIX_SPIDER": "Spider",
				"LANG_LED_MATRIX_POKEBALL": "Pokeball",
				"LANG_OLED_SET_TEXT": "Set Text",
				"LANG_OLED_SET_COORDINATE_X": "X",
				"LANG_OLED_SET_COORDINATE_Y": "Y",
				"LANG_OLED_SET_TEXT_SIZE": "Size",
				"LANG_OLED_SET_TEXT_NAME": "OLED write text",
				"LANG_OLED_SET_TEXT_TOOLTIP": "Writes a text at the given position and size",
				"LANG_OLED_SET_IMAGE": "Set Image",
				"LANG_OLED_SET_IMAGE_NAME": "OLED show image",
				"LANG_OLED_SET_IMAGE_TOOLTIP": "Sets an image at the given position",
				"LANG_OLED_CLEAR": "Clear",
				"LANG_OLED_CLEAR_NAME": "OLED clear region",
				"LANG_OLED_CLEAR_TOOLTIP": "Clears the specified region",
				"LANG_OLED_LINE": "Line",
				"LANG_OLED_LINE_NAME": "OLED draw line",
				"LANG_OLED_LINE_TOOLTIP": "Draws a line with the given coordinates",
				"LANG_OLED_SET_RADIUS": "Radius",
				"LANG_OLED_SET_COORDINATE_WIDTH": "Width",
				"LANG_OLED_SET_COORDINATE_HEIGHT": "Height",
				"LANG_OLED_CIRCLE": "Circle",
				"LANG_OLED_CIRCLE_NAME": "OLED draw circle",
				"LANG_OLED_CIRCLE_TOOLTIP": "Draws a circle",
				"LANG_OLED_RECT": "Rectangle",
				"LANG_OLED_RECT_NAME": "OLED draw rectangle",
				"LANG_OLED_RECT_TOOLTIP": "Draws a rectangle",
				"LANG_OLED_TRIANGLE": "Triangle",
				"LANG_OLED_TRIANGLE_NAME": "OLED draw triangle",
				"LANG_OLED_TRIANGLE_TOOLTIP": "Draws a triangle",
				"LANG_OLED_FILL": "Fill?",
				"LANG_OLED_SET_HEADER_TEXT": "Set Header Text",
				"LANG_OLED_SET_HEADER_TEXT_NAME": "OLED write text on header region",
				"LANG_OLED_SET_HEADER_TEXT_TOOLTIP": "Sets the header text (maximum number of characters is 18) for a OLED 128x32 display SSD1306.",
				"LANG_OLED_SET_MAIN_TEXT": "Set Main Text",
				"LANG_OLED_SET_MAIN_IMAGE": "Set Main Image",
				"LANG_OLED_SET_MAIN_TEXT_NAME": "OLED write text on main region",
				"LANG_OLED_SET_MAIN_TEXT_TOOLTIP": "Sets the central text (maximum number of characters is 8) for a OLED 128x32 display SSD1306.",
				"LANG_OLED_SET_MAIN_IMAGE_TOOLTIP": "Sets the central image (size is 96x16) for a OLED 128x32 display SSD1306.",
				"LANG_OLED_SET_FOOTER_TEXT": "Set Footer Text",
				"LANG_OLED_SET_FOOTER_TEXT_NAME": "OLED write text on footer region",
				"LANG_OLED_SET_FOOTER_TEXT_TOOLTIP": "Sets the footer text (maximum number of characters is 18) for a OLED 128x32 display SSD1306.",
				"LANG_OLED_SET_SMALL_ICON": "Set 8x8 Icon",
				"LANG_OLED_SET_CHAR": "Set Char",
				"LANG_OLED_SET_CHAR_TOOLTIP": "Sets a char on one of the corners or sides",
				"LANG_OLED_SET_SMALL_ICON_NAME": "OLED show small icon image",
				"LANG_OLED_SET_SMALL_ICON_TOOLTIP": "Sets one of the four corners icons (size is 8x8) for a OLED 128x32 display SSD1306.",
				"LANG_OLED_SMALL_ICON": "8x8 Image",
				"LANG_OLED_SMALL_ICON_TOP_LEFT": "Top-Left",
				"LANG_OLED_SMALL_ICON_TOP_RIGHT": "Top-Right",
				"LANG_OLED_SMALL_ICON_BOTTOM_LEFT": "Bottom-Left",
				"LANG_OLED_SMALL_ICON_BOTTOM_RIGHT": "Bottom-Right",
				"LANG_OLED_SET_LARGE_ICON": "Set 16x16 Image",
				"LANG_OLED_SET_LARGE_ICON_NAME": "OLED show large icon image",
				"LANG_OLED_SET_LARGE_ICON_TOOLTIP": "Sets one of the two side images (size is 16x16) for a OLED 128x32 display SSD1306.",
				"LANG_OLED_LARGE_ICON": "16x16 Image",
				"LANG_OLED_LARGE_ICON_LEFT": "Left",
				"LANG_OLED_LARGE_ICON_RIGHT": "Right",
				"LANG_OLED_96x16_IMAGE": "96x16 Image",
				"LANG_OLED_CENTRAL_ICON_BORED": "Bored",
				"LANG_OLED_CENTRAL_ICON_CALM": "Calm",
				"LANG_OLED_CENTRAL_ICON_CONFUSED": "Confused",
				"LANG_OLED_CENTRAL_ICON_COOL": "Cool",
				"LANG_OLED_CENTRAL_ICON_CRYING": "Crying",
				"LANG_OLED_CENTRAL_ICON_KISS": "Kiss",
				"LANG_OLED_CENTRAL_ICON_MUSTACHE": "Mustache",
				"LANG_OLED_CENTRAL_ICON_MUTE": "Mute",
				"LANG_OLED_CENTRAL_ICON_NERVOUS": "Nervous",
				"LANG_OLED_CENTRAL_ICON_BAD": "Bad",
				"LANG_OLED_CENTRAL_ICON_SAD": "Sad",
				"LANG_OLED_CENTRAL_ICON_SHOUTING": "Shouting",
				"LANG_OLED_CENTRAL_ICON_SICK": "Sick",
				"LANG_OLED_CENTRAL_ICON_SMILE": "Smile",
				"LANG_OLED_CENTRAL_ICON_SMILE_TEETH": "Smile teeth",
				"LANG_OLED_CENTRAL_ICON_TONGUE": "Tongue",
				"LANG_OLED_CENTRAL_ICON_WIDE_SMILE": "Wide smile",
				"LANG_OLED_SET_MAIN_IMAGE_NAME": "OLED show image on main region",
				"LANG_OLED_MAIN_IMAGE_NAME": "96x16 Image for main region",
				"LANG_OLED_MAIN_IMAGE_TOOLTIP": "Provides an image of 96x16 size",
				"LANG_OLED_SMALL_ICON_NAME": "Small icon 8x8",
				"LANG_OLED_SMALL_ICON_TOOLTIP": "Provides a small icon of 8x8 size",
				"LANG_OLED_LARGE_ICON_NAME": "Small icon 16x16",
				"LANG_OLED_LARGE_ICON_TOOLTIP": "Provides a large icon of 16x16 size",
				"LANG_OLED_LARGE_ICON_HOME": "Home",
				"LANG_OLED_LARGE_ICON_ARROW_UP": "Arrow Up",
				"LANG_OLED_LARGE_ICON_ARROW_DOWN": "Arrow Down",
				"LANG_OLED_LARGE_ICON_ARROW_LEFT": "Arrow Left",
				"LANG_OLED_LARGE_ICON_ARROW_RIGHT": "Arrow Right",
				"LANG_OLED_LARGE_ICON_BAT0": "No Battery",
				"LANG_OLED_LARGE_ICON_BAT1": "Low Battery",
				"LANG_OLED_LARGE_ICON_BAT2": "Medium Battery",
				"LANG_OLED_LARGE_ICON_BAT3": "Full Battery",
				"LANG_OLED_LARGE_ICON_BAT4": "Battery Charging",
				"LANG_OLED_LARGE_ICON_BLUETOOTH": "Bluetooth",
				"LANG_OLED_LARGE_ICON_BULB": "Bulb",
				"LANG_OLED_LARGE_ICON_BULB_ON": "Light On",
				"LANG_OLED_LARGE_ICON_BULB_OFF": "Light Off",
				"LANG_OLED_LARGE_ICON_BULLET": "Bullet",
				"LANG_OLED_LARGE_ICON_CANCEL": "Cancel",
				"LANG_OLED_LARGE_ICON_CHECK": "Check",
				"LANG_OLED_LARGE_ICON_FILL1": "Empty",
				"LANG_OLED_LARGE_ICON_FILL2": "Low",
				"LANG_OLED_LARGE_ICON_FILL3": "Medium",
				"LANG_OLED_LARGE_ICON_FILL4": "Full",
				"LANG_OLED_LARGE_ICON_SPEAK": "Speak",
				"LANG_OLED_LARGE_ICON_HEART": "Heart",
				"LANG_OLED_LARGE_ICON_NOCONN": "No connection",
				"LANG_OLED_LARGE_ICON_TOOL": "Tool",
				"LANG_OLED_LARGE_ICON_PLUG": "Plug",
				"LANG_OLED_LARGE_ICON_POWER_BUTTON": "Power Button",
				"LANG_OLED_LARGE_ICON_WALL_PLUG": "Wall Plug",
				"LANG_OLED_LARGE_ICON_WIFI1": "WiFi",
				"LANG_OLED_LARGE_ICON_WIFI2": "Low WiFi",
				"LANG_OLED_LARGE_ICON_CLOCK": "Clock",
				"LANG_OLED_LARGE_ICON_TIMER": "Timer",
				"LANG_OLED_LARGE_ICON_WATER_TAP": "Water Tap",
				"LANG_OLED_LARGE_ICON_HUMIDITY": "Low Humidity",
				"LANG_OLED_LARGE_ICON_HUMIDITY2": "High Humidity",
				"LANG_OLED_LARGE_ICON_SUN": "Sun",
				"LANG_OLED_LARGE_ICON_TEMPERATURE": "Temperature",
				"LANG_OLED_LARGE_ICON_NON_INVERTED": "Black Background",
				"LANG_OLED_LARGE_ICON_INVERTED": "White Background",
				"LANG_OLED_LARGE_ICON_LOCK_CLOSED": "Lock Closed",
				"LANG_OLED_LARGE_ICON_LOCK_OPEN": "Lock Open",
				"LANG_OLED_LARGE_ICON_PERSON": "Person",
				"LANG_OLED_LARGE_ICON_WINDOW": "Window",
				"LANG_OLED_LARGE_ICON_DOOR": "Door",
				"LANG_OLED_LARGE_ICON_FACE": "Face",
				"LANG_OLED_LARGE_ICON_SIREN": "Siren",
				"LANG_OLED_LARGE_ICON_WARNING": "Warning",
				"LANG_OLED_LARGE_ICON_PLUS": "Plus",
				"LANG_OLED_LARGE_ICON_MINUS": "Minus",
				"LANG_OLED_LARGE_ICON_MOBILE": "Mobile",
				"LANG_OLED_LARGE_ICON_SIGNAL": "Signal",
				"LANG_OLED_IMAGE_BROWSE_NAME": "Custom image",
				"LANG_OLED_IMAGE_BROWSE_TOOLTIP": "Provides a custom image",
				"LANG_OLED_EMPTY_IMAGE_NAME": "Empty image",
				"LANG_OLED_EMPTY_IMAGE_TOOLTIP": "Provides an empty image",
				"LANG_MATH_FUNCTION_LINEAR": "Linear",
				"LANG_MATH_FUNCTION_LINEAR_NAME": "Linear math function",
				"LANG_MATH_FUNCTION_PARAMETERS": "Param.",
				"LANG_MATH_FUNCTION_LINEAR_TOOLTIP": "A linear function f(x)=a+bx.",
				"LANG_MATH_FUNCTION_QUADRATIC": "Quadratic",
				"LANG_MATH_FUNCTION_QUADRATIC_NAME": "Quadratic math function",
				"LANG_MATH_FUNCTION_QUADRATIC_TOOLTIP": "A quadratic function f(x)=a+bx+cx^2",
				"LANG_MATH_FUNCTION_CUBIC": "Cubic",
				"LANG_MATH_FUNCTION_CUBIC_NAME": "Cubic math function",
				"LANG_MATH_FUNCTION_CUBIC_TOOLTIP": "A cubic function f(x)=a+bx+cx^2+dx^3",
				"LANG_MATH_FUNCTION_RECIPROCAL": "Reciprocal",
				"LANG_MATH_FUNCTION_RECIPROCAL_NAME": "Reciprocal math function",
				"LANG_MATH_FUNCTION_RECIPROCAL_TOOLTIP": "A reciprocal function f(x)=1/(a+bx).",
				"LANG_MATH_FUNCTION_RECIPROCAL_QUADRATIC": "Reciprocal Quadratic",
				"LANG_MATH_FUNCTION_RECIPROCAL_QUADRATIC_NAME": "Reciprocal quadratic math function",
				"LANG_MATH_FUNCTION_RECIPROCAL_QUADRATIC_TOOLTIP": "A reciprocal quadratic function f(x)=1/(a+bx+c*x^2).",
				"LANG_MATH_FUNCTION_GAUSSIAN": "Gaussian",
				"LANG_MATH_FUNCTION_GAUSSIAN_NAME": "Gaussian math function",
				"LANG_MATH_FUNCTION_GAUSSIAN_TOOLTIP": "A Gaussian model function f(x)=ae^(-(x-b)^2/(2c^2))",
				"LANG_MATH_FUNCTION_GEOMETRIC": "Geometric",
				"LANG_MATH_FUNCTION_GEOMETRIC_NAME": "Geometric math function",
				"LANG_MATH_FUNCTION_GEOMETRIC_TOOLTIP": "A geometric function f(x)=ax^(bx).",
				"LANG_MATH_FUNCTION_RATIONAL": "Rational",
				"LANG_MATH_FUNCTION_RATIONAL_NAME": "Rational math function",
				"LANG_MATH_FUNCTION_RATIONAL_TOOLTIP": "A rational function f(x)=(a+bx)/(1+cx+dx^2).",
				"LANG_MATH_FUNCTION_POWER": "Power",
				"LANG_MATH_FUNCTION_POWER_NAME": "Power math function",
				"LANG_MATH_FUNCTION_POWER_TOOLTIP": "A power function f(x)=ab^x.",
				"LANG_MATH_FUNCTION_ROOT": "Root",
				"LANG_MATH_FUNCTION_ROOT_NAME": "Root math function",
				"LANG_MATH_FUNCTION_ROOT_TOOLTIP": "A root function f(x)=a(b^(1/x)).",
				"LANG_MATH_FUNCTION_SINUSOIDAL": "Sinusoidal",
				"LANG_MATH_FUNCTION_SINUSOIDAL": "Sinusoidal math function",
				"LANG_MATH_FUNCTION_SINUSOIDAL_NAME": "Sinusoidal math function",
				"LANG_MATH_FUNCTION_SINUSOIDAL_TOOLTIP": "A sinusoidal function f(x)=a+bcos(cx+d).",
				"LANG_MATH_FUNCTION_TRUNC_FOURIER": "Truncated Fourier",
				"LANG_MATH_FUNCTION_TRUNC_FOURIER_NAME": "Truncated Fourier math function",
				"LANG_MATH_FUNCTION_TRUNC_FOURIER_TOOLTIP": "A truncated Fourier function f(x)=acos(x+d)+bcos(2x+d)+ccos(3x+d)",
				"LANG_I2C_READ_BYTE": "I2C (Master) Read byte",
				"LANG_I2C_READ_BYTE_NAME": "Read I2C byte",
				"LANG_I2C_ADDRESS": "Slave address",
				"LANG_I2C_READ_BYTES": "I2C (Master) Read data",
				"LANG_I2C_READ_BYTES_NAME": "Read I2C bytes",
				"LANG_I2C_SEND": "I2C (Master) Send",
				"LANG_I2C_SEND_NAME": "Send I2C bytes",
				"LANG_I2C_ON_REQUEST": "I2C (Slave) On Request",
				"LANG_I2C_ON_REQUEST_NAME": "On Request I2C",
				"LANG_I2C_ON_RECEIVE": "I2C (Slave) On Receive",
				"LANG_I2C_ON_RECEIVE_NAME": "On Receive I2C",
				"LANG_I2C_READ_BYTES_WITH": "with",
				"LANG_I2C_BYTES": "data",
				"LANG_I2C_DO": "do",
				"LANG_I2C_SEND_BYTES": "Send data",
				"LANG_I2C_READ_BYTE_TOOLTIP": "This instruction reads a byte from a I2C device at the given address.",
				"LANG_I2C_READ_BYTES_TOOLTIP": "This instruction reads bytes from a I2C device at the given address. Data is stored in a 1D array variable.",
				"LANG_I2C_SEND_BYTES_TOOLTIP": "This instruction sends bytes to a I2C device. It can send constant data, numeric data (stored in variables) or 1D arrays. Depending on the data, the number of bytes sent may change.",
				"LANG_I2C_ON_REQUEST_BYTES_TOOLTIP": "This instruction sends bytes to a I2C master device when requested. It is intented to be used by a slave device to send constant data, numeric data (stored in variables) or 1D arrays. Depending on the data, the number of bytes sent may change.",
				"LANG_I2C_ON_RECEIVE_BYTES_TOOLTIP": "This instruction receives bytes from a I2C master devices. Data must be read using the reading instruction, but the amount of bytes received are indicated in a variable 'numBytes'.",
				"LANG_EEPROM_CLEAR": "EEPROM Clear",
				"LANG_EEPROM_SIZE": "EEPROM Size",
				"LANG_EEPROM_SIZE_NAME": "",
				"LANG_EEPROM_READ_BYTE": "EEPROM Read Byte",
				"LANG_EEPROM_READ_BYTES": "EEPROM Read Bytes",
				"LANG_EEPROM_WRITE": "EEPROM Write",
				"LANG_EEPROM_ADDRESS": "Address",
				"LANG_EEPROM_READ_BYTES_WITH": "with",
				"LANG_EEPROM_BYTES": "Bytes",
				"LANG_EEPROM_CLEAR_NAME": "Erases EEPROM memory",
				"LANG_EEPROM_READ_BYTE_NAME": "Read byte EEPROM memory",
				"LANG_EEPROM_READ_BYTES_NAME": "Read bytes EEPROM memory",
				"LANG_EEPROM_WRITE_NAME": "Write bytes EEPROM memory",
				"LANG_EEPROM_CLEAR_TOOLTIP": "Erases all contents of the EEMPROM memory. Use with caution to extend EEPROM life cycle.",
				"LANG_EEPROM_SIZE_NAME": "Defines EEPROM memory size",
				"LANG_EEPROM_SIZE_TOOLTIP": "Defines the size of the EEPROM to use.",
				"LANG_EEPROM_READ_BYTE_TOOLTIP": "Reads a byte at given address of the EEPROM memory.",
				"LANG_EEPROM_READ_BYTES_TOOLTIP": "Reads bytes at the given address of the EEPROM memory. Data is stored in a 1D array variable.",
				"LANG_EEPROM_WRITE_BYTES_TOOLTIP": "Writes bytes on the EEPROM memoery. Depending on the data, the number of bytes written may change.",
				"LANG_WIFI_IOT_THINGSBOARD_SETUP": "Setup ThingsBoard Device",
				"LANG_WIFI_ESP8266_DEVICE_NAME": "Device name",
				"LANG_WIFI_ESP8266_TOKEN": "Token",
				"LANG_WIFI_IOT_THINGSBOARD_RECONNECT": "Reconnect",
				"LANG_WIFI_IOT_THINGSBOARD_RECONNECT_NAME": "Thingsboard reconnect",
				"LANG_WIFI_IOT_THINGSBOARD_RECONNECT_TOOLTIP": "This instruction reconnects to Thingsboard server",
				"LANG_WIFI_IOT_THINGSBOARD_SETUP_NAME": "Thingsboard",
				"LANG_WIFI_IOT_THINGSBOARD_SETUP_TOOLTIP": "This instructions configures a device to receive and publish data on Thingsboard (https://demo.thingsboard.io)",
				"LANG_WIFI_IOT_THINGSBOARD_RPC": "Get Remote Value",
				"LANG_WIFI_IOT_THINGSBOARD_RPC_VALUE": "Remote Value",
				"LANG_WIFI_IOT_THINGSBOARD_RPC_VALUE_NAME": "Thingsboard remote value",
				"LANG_WIFI_IOT_THINGSBOARD_RPC_VALUE_TOOLTIP": "Returns the value associated with a RPC.",
				"LANG_WIFI_IOT_THINGSBOARD_RPC_VALUE_WARN": "This value is only valid within the code to execute on a RPC.",
				"LANG_WIFI_IOT_THINGSBOARD_RPC_NAME": "Thingsboard RPC",
				"LANG_WIFI_IOT_THINGSBOARD_RPC_TOOLTIP": "This instructions gets a remote value using RPCs on Thingsboard (https://demo.thingsboard.io)",
				"LANG_WIFI_IOT_THINGSBOARD_RPC_SWITCH": "Remote Switch",
				"LANG_WIFI_IOT_THINGSBOARD_RPC_KNOB": "Remote Knob",
				"LANG_WIFI_IOT_THINGSBOARD_RPC_RPC": "RPC",
				"LANG_WIFI_IOT_THINGSBOARD_RPC_ITEM_TOOLTIP": "A Remote Procedure Call (RPC) to get a remote value from a switch or a knob.",
				"LANG_WIFI_IOT_THINGSBOARD_SEND": "Send Remote Value",
				"LANG_WIFI_IOT_THINGSBOARD_TELEMETRY": "Time-series",
				"LANG_WIFI_IOT_THINGSBOARD_TELEMETRY_DATA": "Data to send",
				"LANG_WIFI_IOT_THINGSBOARD_TELEMETRY_DATA_TOOLTIP": "Stack with items to send to Thingsboard as time-series or attribute data",
				"LANG_WIFI_IOT_THINGSBOARD_TELEMETRY_ITEM": "Time Series",
				"LANG_WIFI_IOT_THINGSBOARD_ATTRIBUTE_ITEM": "Attribute",
				"LANG_WIFI_IOT_THINGSBOARD_TELEMETRY_ITEM_TOOLTIP": "A time-series data to send",
				"LANG_WIFI_IOT_THINGSBOARD_ATTRIBUTE_ITEM_TOOLTIP": "An attribute data to send",
				"LANG_WIFI_IOT_THINGSBOARD_TIMESERIES_ITEM": "Time-series",
				"LANG_WIFI_IOT_THINGSBOARD_VALUE": "Value",
				"LANG_WIFI_IOT_THINGSBOARD_TELEMETRY_TOOLTIP": "Time-series data requires a key value associated to the data to represent on a Thingsboard widget panel together with the value to represent.",
				"LANG_WIFI_IOT_THINGSBOARD_SEND_NAME": "Thingsboards send",
				"LANG_WIFI_IOT_THINGSBOARD_SEND_TOOLTIP": "Sends telemetry data to Thingsboard",
				"LANG_CONTROLS_REMOTE_GET_WARNING": "This instruction must be used within a getting instruction such as remotely getting values from USB, Bluetooth or WiFi",
				"LANG_SUBCATEGORY_BLE": "BLE",
				"LANG_BLE_SERVER_SETUP": "BLE Device (Server)",
				"LANG_BLE_SERVER_SETUP_NAME": "Configures a BLE Device Server",
				"LANG_BLE_NAME": "Name",
				"LANG_BLE_DEVICE_MANUFACTURER": "Manufacturer",
				"LANG_BLE_UUID": "UUID",
				"LANG_BLE_SERVER_ON_CONNECT": "On Connect",
				"LANG_BLE_SERVER_ON_DISCONNECT": "On Disconnect",
				"LANG_BLE_SERVER_TOOLTIP": "Sets up a BLE server with a set of services. You can indicate the device name as well as add services and the group of instructions to execute in case of connection or disconnection.",
				"LANG_BLE_DEVICE": "Device",
				"LANG_BLE_SERVICE": "Service",
				"LANG_BLE_SERVICE_NAME": "Configures a BLE Service",
				"LANG_BLE_IO_SERVICE": "Automation I/O",
				"LANG_BLE_SSE_SERVICE": "Environmental",
				"LANG_BLE_DEV_INFO_SERVICE": "Device Information",
				"LANG_BLE_BATT_SERVICE": "Battery",
				"LANG_BLE_SSE_ELEVATION": "Elevation",
				"LANG_BLE_SSE_PRESSURE": "Pressure",
				"LANG_BLE_SSE_TEMPERATURE": "Temperature",
				"LANG_BLE_SSE_HUMIDITY": "Humidity",
				"LANG_BLE_SSE_UV_INDEX": "UV-Index",
				"LANG_BLE_SSE_IRRADIANCE": "Irradiance",
				"LANG_BLE_SSE_RAINFALL": "Rainfall",
				"LANG_BLE_CHARACTERISTIC": "Characteristic",
				"LANG_BLE_CHARACTERISTIC_NAME": "Configures a BLE Characteristic",
				"LANG_BLE_SERVICE_TOOLTIP": "Creates a service for a BLE device",
				"LANG_BLE_CHARACTERISTIC_TOOLTIP": "Creates a characteristic for a BLE service",
				"LANG_BLE_CALLBACK": "On Write",
				"LANG_BLE_SET": "Characteristic Data",
				"LANG_BLE_SET_NAME": "Sets characteristic data",
				"LANG_BLE_GET": "Characteristic Data",
				"LANG_BLE_GET_NAME": "Gets characteristic data",
				"LANG_BLE_GET_LENGTH": "Characteristic Data Length",
				"LANG_BLE_GET_LENGTH_NAME": "Gets characteristic data length",
				"LANG_BLE_VALUE": "Value",
				"LANG_BLE_INITIAL_VALUE": "Initial value",
				"LANG_BLE_NOTIFY": "Notify",
				"LANG_BLE_NOTIFY_NAME": "Notifies a characteristic",
				"LANG_BLE_READ": "Read?",
				"LANG_BLE_WRITE": "Write?",
				"LANG_BLE_NOTIFIES": "Notifies?",
				"LANG_BLE_GET_CHARACTERISTIC_VALUE_TOOLTIP": "Gets the value of a readable/writable characteristic. It returns an array of chars.",
				"LANG_BLE_SET_CHARACTERISTIC_VALUE_TOOLTIP": "Sets the value of a readable/writable characteristic. It must be a number, string or an array.",
				"LANG_BLE_NOTIFY_CHARACTERISTIC_VALUE_TOOLTIP": "Notifies the value of a notifying characteristic. It must be a number, string or an array.",
				"LANG_SUBCATEGORY_LDR": "LDR",
				"LANG_LDR_READ": "Read LDR",
				"LANG_LDR_PIN": "PIN",
				"LANG_LDR_READ_NAME": "Read LDR",
				"LANG_LDR_READ_TOOLTIP": "Reads the analog value of a LDR sensor",
				"LANG_LDR_READ_CALIBRATED": "Luminance (%)",
				"LANG_LDR_READ_CALIBRATED_NAME": "Read calibrated LDR",
				"LANG_LDR_READ_CALIBRATED_TOOLTIP": "Reads the luminance in percentage (a number between 0% and 100%). Returns a calibrated value of a LDR sensor.",
				"LANG_LDR_READ_LUX": "Luminance (Lux)",
				"LANG_LDR_READ_LUX_NAME": "Read LDR luminance",
				"LANG_LDR_READ_LUX_TOOLTIP": "Reads the luminance in lux. Returns a calibrated value of a LDR sensor.",
				"LANG_LDR_MAX_LUX": "Set Max. Lux",
				"LANG_LDR_MIN_LUX": "Set Min. Lux",
				"LANG_LDR_MAX_LUX_NAME": "Maximum luminance",
				"LANG_LDR_MIN_LUX_NAME": "Maximum luminance",
				"LANG_LDR_MAX_LUX_TOOLTIP": "Sets the maximum expected luminance to be considered as 100%",
				"LANG_LDR_MIN_LUX_TOOLTIP": "Sets the minimum expected luminance to be considered as 0%",
				"LANG_SUBCATEGORY_IR": "IR Remote",
				"LANG_IR_COMMAND": "IR Command",
				"LANG_IR_COMMAND_NAME": "IR command",
				"LANG_IR_COMMAND_TOOLTIP": "Decodes an IR remote command",
				"LANG_IR_COMMAND_PIN": "PIN",
				"LANG_IR_COMMAND_CODE_RECV": "When receiving code",
				"LANG_IR_COMMAND_CODE": "Code",
				"LANG_IR_DO": "Do",
				"LANG_IR_COMMAND_DECODE": "Decode",
				"LANG_IR_AVAILABLE": "IR Code available",
				"LANG_IR_AVAILABLE_NAME": "IR code available",
				"LANG_IR_AVAILABLE_TOOLTIP": "Checks if the IR receiver has received a code.",
				"LANG_IR_READ_CODE": "Read Code",
				"LANG_IR_READ_CODE_NAME": "Read IR Code",
				"LANG_IR_READ_CODE_TOOLTIP": "Returns the last code received on the IR receiver. Use inside the IR available instruction.",
				"LANG_SUBCATEGORY_DIMMER": "Dimmer",
				"LANG_DIMMER_SET_BRIGHTNESS": "AC Dimmer",
				"LANG_DIMMER_ZC_PIN": "Zero-crossing PIN",
				"LANG_DIMMER_THYRISTOR_PIN": "Thyristor PIN",
				"LANG_DIMMER_BRIGHTNESS": "Brightness",
				"LANG_DIMMER_SET_BRIGHTNESS_NAME": "Lightdimmer",
				"LANG_DIMMER_SET_BRIGHTNESS_TOOLTIP": "Sets the Brightness of an AC light.",
				"LANG_MOIST_ALARM": "Moisture Alarm",
				"LANG_MOIST_ALARM_NAME": "Moisture sensor alarm",
				"LANG_MOIST_PIN": "PIN",
				"LANG_MOIST_ALARM_TOOLTIP": "Checks moist sensor alarm.",
				"LANG_VARIABLES_PIN_SPI": "SPI PIN",
				"LANG_WIFI_IOT_AMAZON_ECHO": "Setup Amazon Echo",
				"LANG_WIFI_IOT_AMAZON_ECHO_NAME": "Amazon Echo (Alexa) setup",
				"LANG_WIFI_IOT_AMAZON_ECHO_TOOLTIP": "Setups the value of digital device (on/off) compatible with Amazon Echo",
				"LANG_WIFI_IOT_AMAZON_ECHO_DIGITAL_DEVICE": "Digital Device",
				"LANG_WIFI_IOT_AMAZON_ECHO_DIGITAL_DEVICE_TOOLTIP": "Controls a digital device",
				"LANG_WIFI_IOT_AMAZON_ECHO_ANALOG_DEVICE": "Analog Device",
				"LANG_WIFI_IOT_AMAZON_ECHO_ANALOG_DEVICE_TOOLTIP": "Controls an analog device",
				"LANG_AMAZON_STATE": "State",
				"LANG_AMAZON_VALUE": "Value",
				"LANG_WIFI_IOT_AMAZON_UPDATE": "Update Amazon Echo Status",
				"LANG_WIFI_IOT_AMAZON_ECHO_UPDATE_NAME": "Amazon Echo update",
				"LANG_WIFI_IOT_AMAZON_ECHO_UPDATE_TOOLTIP": "Updates Amazon echo device status",
				"LANG_WIFI_API_REST": "HTTP Receive",
				"LANG_WIFI_API_REST_NAME": "HTTP Receive API REST command",
				"LANG_WIFI_API_REST_RECEIVE": "HTTP API REST Receive",
				"LANG_WIFI_API_REST_MESSAGE": "Message",
				"LANG_WIFI_API_REST_DATA": "Data",
				"LANG_WIFI_API_REST_MESSAGE_PIN": "PIN",
				"LANG_WIFI_API_REST_MESSAGE_INDEX": "Index",
				"LANG_WIFI_API_REST_MESSAGE_DIGITAL_READ": "Digital Read",
				"LANG_WIFI_API_REST_MESSAGE_DIGITAL_READ_NAME": "API REST DigitalRead",
				"LANG_WIFI_API_REST_MESSAGE_DIGITAL_WRITE": "Digital Write",
				"LANG_WIFI_API_REST_MESSAGE_DIGITAL_WRITE_NAME": "API REST DigitalWrite",
				"LANG_WIFI_API_REST_MESSAGE_ANALOG_READ": "Analog Read",
				"LANG_WIFI_API_REST_MESSAGE_ANALOG_READ_NAME": "API REST AnalogRead",
				"LANG_WIFI_API_REST_MESSAGE_ANALOG_WRITE": "Analog Write",
				"LANG_WIFI_API_REST_MESSAGE_ANALOG_WRITE_NAME": "API REST AnalogWrite",
				"LANG_WIFI_API_REST_MESSAGE_SERVO": "API REST Servo",
				"LANG_WIFI_API_REST_MESSAGE_SERVO_NAME": "API REST Servo",
				"LANG_WIFI_API_REST_MESSAGE_SERVO_CONT": "API REST ServoCont",
				"LANG_WIFI_API_REST_MESSAGE_SERVO_CONT_NAME": "API REST ServoCont",
				"LANG_WIFI_API_REST_MESSAGE_SONAR": "API REST Sonar",
				"LANG_WIFI_API_REST_MESSAGE_SONAR_NAME": "API REST Sonar",
				"LANG_WIFI_API_REST_MESSAGE_BUZZER": "API REST Buzzer",
				"LANG_WIFI_API_REST_MESSAGE_BUZZER_NAME": "API REST Buzzer",
				"LANG_WIFI_API_REST_MESSAGE_TEMPERATURE": "API REST Temperature",
				"LANG_WIFI_API_REST_MESSAGE_HUMIDITY": "API REST Humidity",
				"LANG_WIFI_API_REST_MESSAGE_TEMPERATURE_NAME": "API REST Temperature",
				"LANG_WIFI_API_REST_MESSAGE_HUMIDITY_NAME": "API REST Humidity",
				"LANG_WIFI_API_REST_MESSAGE_LED_MATRIX": "API REST LED LEDMatrix8x8",
				"LANG_WIFI_API_REST_MESSAGE_LED_MATRIX_NAME": "API REST LED LEDMatrix8x8",
				"LANG_WIFI_API_REST_MESSAGE_LED_STRIP": "API REST RGB_LEDStrip",
				"LANG_WIFI_API_REST_MESSAGE_LED_STRIP_NAME": "API REST RGB_LEDStrip",
				"LANG_WIFI_API_REST_MESSAGE_BOOL": "Boolean Variables",
				"LANG_WIFI_API_REST_MESSAGE_BOOL_READ_NAME": "API REST BooleanVariable",
				"LANG_WIFI_API_REST_MESSAGE_INTEGER": "Integer Variables",
				"LANG_WIFI_API_REST_MESSAGE_INTEGER_NAME": "API REST IntegerVariable",
				"LANG_WIFI_API_REST_MESSAGE_FLOAT": "Float Variables",
				"LANG_WIFI_API_REST_MESSAGE_FLOAT_NAME": "API REST FloatVariable",
				"LANG_WIFI_API_REST_MESSAGE_STRING": "String Variables",
				"LANG_WIFI_API_REST_MESSAGE_STRING_NAME": "API REST StringVariable",
				"LANG_WIFI_API_REST_TOOLTIP": "Decodes API REST messages",
				"LANG_WIFI_API_REST_MESSAGE_TOOLTIP": "A message to decode",
				"LANG_WIFI_API_REST_DATA": "Data",
				"LANG_WIFI_API_REST_MESSAGE_TYPE": "Message",
				"LANG_WIFI_API_REST_MESSAGE_DO": "Do",
				"LANG_WIFI_API_REST_MESSAGE_RESPONSE": "Response",
				"LANG_PROGRAMMING_INCLUDE_LIBRARY": "Include Library",
				"LANG_PROGRAMMING_INCLUDE_LIBRARY_NAME": "Include a Library",
				"LANG_PROGRAMMING_INCLUDE_LIBRARY_DESCRIPTION": "Include a specific library header name (without .h).",
				"LANG_PROGRAMMING_INCLUDE_LIBRARY_FIELD_LIBRARY": "Library: Library name.",
				"LANG_PROGRAMMING_INCLUDE_LIBRARY_TOOLTIP": "Includes a external library. Useful to create Arduino code for custom parts of your code not considered yet in Facilino. I.e: For SoftwareSerial library use 'SoftwareSerial'",
				"LANG_VARIABLES_OBJECT_TYPE": "Declare OBJECT",
				"LANG_VARIABLES_OBJECT_TYPE_NAME": "Declare object",
				"LANG_VARIABLES_OBJECT_TYPE_VARIABLES_NAME": "Declare object variable",
				"LANG_VARIABLES_OBJECT_METHOD_NO_RETURN_NAME": "Declare object method without return value",
				"LANG_VARIABLES_OBJECT_METHOD_RETURN_NAME": "Declare object method with return value",
				"LANG_VARIABLES_OBJECT_TYPE_VARIABLES": "Variables",
				"LANG_VARIABLES_OBJECT_TYPE_METHODS": "Methods",
				"LANG_VARIABLES_OBJECT_TYPE_TOOLTIP": "Defines an object that can contain variables and methods (functions and procedures). Useful to work with compact notation.",
				"LANG_VARIABLES_VARIABLES_OJBECT": "Declare OBJECT Variable ",
				"LANG_VARIABLES_VARIABLES_OJBECT_TOOLTIP": "Declares an object variable to be used just like a standard variable.",
				"LANG_VARIABLES_METHODS_OBJECT": "Declare OBJECT Method",
				"LANG_VARIABLES_METHODS_OBJECT_TOOLTIP": "Declares a method inside an object to be called just like a standard procedure or function.",
				"LANG_SUBCATEGORY_ARM": "Robot Arm",
				"LANG_MOVE_ARM_SETUP_NAME": "Setup meArm Robot",
				"LANG_MOVE_ARM_SETUP": "meArm Robot (setup)",
				"LANG_MOVE_ARM_SETUP_TOOLTIP": "Defines meArm robot servo connections",
				"LANG_MOVE_ARM_JOINTS_NAME": "Move meArm joints",
				"LANG_MOVE_ARM_JOINTS": "Move meArm (joints)",
				"LANG_MOVE_ARM_JOINT": "Joint",
				"LANG_MOVE_ARM_TIME": "Time",
				"LANG_MOVE_ARM_JOINTS_TOOLTIP": "Move meArm robot to a specific joint configuration",
				"LANG_MOVE_ARM_CONF_NAME": "MeArm robot configuration",
				"LANG_MOVE_ARM_CONF": "Configuration",
				"LANG_MOVE_ARM_CONF_TOOLTIP": "Defines a robot configuration (joint angles)",
				"LANG_MOVE_ARM_POINT_NAME": "Move meArm to a point",
				"LANG_MOVE_ARM_POINT": "Move meArm (point)",
				"LANG_MOVE_ARM_TARGET": "Target",
				"LANG_MOVE_ARM_POINT_TOOLTIP": "Moves meArm robot to a target point",
				"LANG_MOVE_ARM_POS_NAME": "Position",
				"LANG_MOVE_ARM_POS_TOOLTIP": "Defines a robot target position",
				"LANG_MOVE_ARM_LINE_NAME": "Move meArm to a point linearly",
				"LANG_MOVE_ARM_LINE": "Move meArm (line)",
				"LANG_MOVE_ARM_LINE_TOOLTIP": "Moves meArm robot to a target in a linear movement",
				"LANG_MOVE_ARM_ARC_NAME": "Move meArm to a point describing an arc",
				"LANG_MOVE_ARM_ARC": "Move meArm (arc)",
				"LANG_MOVE_ARM_ARC_TOOLTIP": "Moves meArm robot to a target in a circular movement",
				"LANG_MOVE_ARM_INTERMEDIATE": "Intermediate position",
				"LANG_MOVE_MEARM_GRIPPER_NAME": "Control for meArm gripper",
				"LANG_SERVO_MOVE_MEARM_GRIPPER": "meArm gripper",
				"LANG_MOVE_MEARM_GRIPPER_TOOLTIP": "Controls meArm gripper",
				"LANG_SERVO_MOVE_FROM": "From",
				"LANG_SERVO_MOVE_TO": "To",
				"LANG_MOVE_MEARM__OFFSET": "Settings",
				"LANG_MOVE_MEARM_MIN": "Min",
				"LANG_MOVE_MEARM_MAX": "Max",
				"LANG_MOVE_MEARM_SERVOS": "Servos (us)"
			}
		}
	}
}
